cdr-nav-iconshtml(lang='en-us')
  head
    meta(charset='utf-8')
    meta(http-equiv="X-UA-Compatible" content="IE=edge,chrome=1")
    meta(name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0")
    meta(http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate")
    meta(http-equiv="Pragma" content="no-cache")
    meta(http-equiv="Expires" content="0")
    title Commander
    <!-- JS Libraries -->
    script(type="text/javascript" src="/scripts/popper.js/dist/umd/popper.min.js")
    script(type="text/javascript" src="/scripts/jquery/dist/jquery.js")
    script(type="text/javascript" src="/scripts/jquery.flot/jquery.colorhelpers.js")
    script(type="text/javascript" src="/scripts/jquery.flot/jquery.flot.js")
    script(type="text/javascript" src="/scripts/jquery.flot/jquery.flot.canvas.js")
    script(type="text/javascript" src="/scripts/jquery.flot/jquery.flot.categories.js")
    script(type="text/javascript" src="/scripts/jquery.flot/jquery.flot.crosshair.js")
    script(type="text/javascript" src="/scripts/jquery.flot/jquery.flot.errorbars.js")
    script(type="text/javascript" src="/scripts/jquery.flot/jquery.flot.fillbetween.js")
    script(type="text/javascript" src="/scripts/jquery.flot/jquery.flot.image.js")
    script(type="text/javascript" src="/scripts/jquery.flot/jquery.flot.navigate.js")
    script(type="text/javascript" src="/scripts/jquery.flot/jquery.flot.pie.js")
    script(type="text/javascript" src="/scripts/jquery.flot/jquery.flot.resize.js")
    script(type="text/javascript" src="/scripts/jquery.flot/jquery.flot.selection.js")
    script(type="text/javascript" src="/scripts/jquery.flot/jquery.flot.stack.js")
    script(type="text/javascript" src="/scripts/jquery.flot/jquery.flot.symbol.js")
    script(type="text/javascript" src="/scripts/jquery.flot/jquery.flot.threshold.js")
    script(type="text/javascript" src="/scripts/jquery.flot/jquery.flot.time.js")
    
    script(type="text/javascript" src="/scripts/jquery-ui-dist/jquery-ui.min.js")
    script(type="text/javascript" src="/scripts/bootstrap/dist/js/bootstrap.min.js")
    script(type="text/javascript" src="/scripts/bootstrap-colorpicker/dist/js/bootstrap-colorpicker.min.js")
    script(type="text/javascript" src="/scripts/patternfly-bootstrap-treeview/dist/bootstrap-treeview.min.js")
    script(type="text/javascript" src="/scripts/svg.js/dist/svg.js")
    script(type="text/javascript" src='/scripts/wolfy87-eventemitter/EventEmitter.js')
    script(type="text/javascript" src='/scripts/socket.io-client/dist/socket.io.js')
    <!-- Backup socket io path -->
    script(type="text/javascript" src='/scripts/golden-layout/dist/goldenlayout.min.js')
    script(type="text/javascript" src="/scripts/overlayscrollbars/js/jquery.overlayScrollbars.min.js")
    script(type="text/javascript" src="/scripts/jquery.flot/excanvas.min.js")
    script(type="text/javascript" src='/scripts/cesium/Build/CesiumUnminified/Cesium.js')
    script(type="text/javascript" src="/scripts/file-saver/dist/FileSaver.min.js")
    script(type="text/javascript" src="/scripts/sprintf-js/dist/sprintf.min.js")
    script(type="text/javascript" src="/scripts/sparklines/source/sparkline.js")
    script(type="text/javascript" src="/scripts/jquery-contextmenu/dist/jquery.contextMenu.min.js")
    script(type="text/javascript" src="/scripts/handlebars/dist/handlebars.min.js")
    script(type="text/javascript" src="/scripts/d3/dist/d3.min.js")
    script(type="text/javascript" src="/scripts/d3-tip/dist/index.js")
    script(type="text/javascript" src="/scripts/d3-scale/dist/d3-scale.min.js")
    
    script(type="text/javascript" src="/scripts/jszip/dist/jszip.min.js")
    
    script(type="text/javascript" src="/scripts/datatables/media/js/jquery.dataTables.js") 
    script(type="text/javascript" src="/scripts/jqueryfiletree/dist/jQueryFileTree.min.js") 
    
    
    <!--script(type="text/javascript" src="/scripts/datatables.net-bs4/js/dataTables.bootstrap4.min.js") -->
    script(type="text/javascript" src="/scripts/datatables.net-buttons/js/dataTables.buttons.min.js")
    <!--script(type="text/javascript" src="/scripts/datatables.net-buttons/js/buttons.colVis.min.js")-->
    script(type="text/javascript" src="/scripts/datatables.net-buttons/js/buttons.flash.min.js")
    script(type="text/javascript" src="/scripts/datatables.net-buttons/js/buttons.html5.min.js")
    script(type="text/javascript" src="/scripts/datatables.net-buttons/js/buttons.print.min.js")
    <!--script(type="text/javascript" src="/scripts/datatables.net-buttons-bs4/js/buttons.bootstrap4.min.js")-->
    
    <!--script(type="text/javascript" src="/scripts/jquery-bootgrid/dist/jquery.bootgrid.min.js")-->
    <!--script(type="text/javascript" src="/scripts/jquery-bootgrid/dist/jquery.bootgrid.fa.min.js")-->
    
   
    <!--script(type="text/javascript" src="/scripts/d3/dist/d3.js") 
    <!--script(type="text/javascript" src="/scripts/d3-scale/dist/d3-scale.js") 
    <!-- script(type="text/javascript" src="/scripts/radar-chart-d3/src/radar-chart.js") -->
    
    <!-- CSS Libraries -->
    link(rel="stylesheet" type="text/css" href="/scripts/jquery-ui-dist/jquery-ui.min.css")
    link(rel="stylesheet" type="text/css" href="/scripts/overlayscrollbars/css/OverlayScrollbars.min.css")
    link(rel="stylesheet" type="text/css" href="/scripts/patternfly-bootstrap-treeview/dist/bootstrap-treeview.min.css")
    link(rel="stylesheet" type="text/css" href="/scripts/bootstrap/dist/css/bootstrap.min.css")
    link(rel="stylesheet" type="text/css" href="/scripts/bootstrap-colorpicker/dist/css/bootstrap-colorpicker.min.css")
    link(rel="stylesheet" type="text/css" href="/scripts/font-awesome/css/font-awesome.css")
    link(type="text/css" rel="stylesheet" href="/css/goldenlayout-base.css")
    link(type="text/css" rel="stylesheet" href="/css/goldenlayout-dark-theme.css")
    <!--link(rel="stylesheet" type="text/css" href="/scripts/golden-layout/src/css/goldenlayout-base.css")--> 
    <!--link(rel="stylesheet" type="text/css" href="/scripts/golden-layout/src/css/goldenlayout-dark-theme.css")-->
    link(type="text/css" rel="stylesheet" href="/scripts/cesium/Source/Widgets/widgets.css")
    link(type="text/css" rel="stylesheet" href="/scripts/jquery-contextmenu/dist/jquery.contextMenu.min.css") 
    
    link(type="text/css" rel="stylesheet" href="/scripts/jquery-ui-dist/jquery-ui.min.css")
    link(type="text/css" rel="stylesheet" href="/scripts/jquery-ui-dist/jquery-ui.structure.min.css")
    link(type="text/css" rel="stylesheet" href="/scripts/jquery-ui-dist/jquery-ui.theme.min.css")
    
    <!-- link(type="text/css" rel="stylesheet" href="/scripts/jquery-bootgrid/dist/jquery.bootgrid.min.css") -->
    
    <!--link(type="text/css" rel="stylesheet" href="/scripts/datatables.net-bs4/css/dataTables.bootstrap4.min.css") -->
    
    link(type="text/css" rel="stylesheet" href="/scripts/datatables/media/css/jquery.dataTables.min.css")
    <!--link(type="text/css" rel="stylesheet" href="/scripts/datatables.net-buttons-bs4/css/buttons.bootstrap4.min.css") -->
    
    link(rel="stylesheet" type="text/css" href="/css/commander.css")
    
    
  body
    <!-- Generic Modal Template -->
    div#CommandInputForm.modal.fade(tabindex="-1" role="dialog" aria-labelledby="CommandInputForm" aria-hidden="true")
      div.modal-dialog(role="document")
        div.modal-content
          div.modal-header
            h5.modal-title#modalTitle Title Placeholder
            button(type="button" class="close" data-dismiss="modal" aria-label="Close" style="color:white")
              span(aria-hidden="true") &times;
          div.modal-body
            form#modalForm
          div.modal-footer
            button#modalSubmit.btn.btn-outline-primary(type="submit" data-dismiss="modal") OK
            button.btn.btn-outline-secondary(type="button" data-dismiss="modal") Close    
    <!-- Top Navigation Bar -->
    nav.cdr-nav-top.navbar.fixed-top.navbar-expand-lg.navbar-dark.bg-dark
      button.cdr-xs-nav-toggle.navbar-toggler(type="button" data-toggle="collapse" data-target="#cdr-nav-top-left-content" aria-controls="cdr-nav-top-left-content" aria-expanded="false" aria-label="Toggle navigation")
        span.navbar-toggler-icon
      button.cdr-xs-nav-toggle.navbar-toggler(type="button" data-toggle="collapse" data-target="#cdr-nav-top-right-content" aria-controls="cdr-nav-top-right-content" aria-expanded="false" aria-label="Toggle navigation")
        span.navbar-toggler-icon
      #cdr-nav-top-left-content.collapse.navbar-collapse
        ul.navbar-nav.cdr-nav-btn
          button#cdr-app-menu-toggle.btn.btn-menu-button(data-tooltip='true' title='Open/Close Menus')
            i.cdr-nav-icons.fa.fa-bars
        ul#cdr-well-top-left.navbar-nav.cdr-well
        ul.navbar-nav.ml-auto
      a.cdr-nav-top-brand.navbar-brand(href="#")
        img(src="/img/Windhover-Mark-White.png" width="50" class="d-inline-block align-top" alt="")
      #cdr-nav-top-right-content.collapse.navbar-collapse
        ul.navbar-nav.ml-auto
        ul#cdr-well-top-right.navbar-nav.cdr-well
        ul.navbar-nav.cdr-nav-btn(data-tooltip='true' title='Load Layout')
          button.btn.btn-menu-button( data-toggle="modal" data-target="#CommandInputForm" data-title="Load Layout" data-submit="LoadLayout" data-custom='[{"label":"Select Layout", "type":"browse", "dtype":"none", "getItem":"GetStoredLayoutList"}]') 
            i.cdr-nav-icons.fa.fa-download
        ul.navbar-nav.cdr-nav-btn(data-tooltip='true' title='Save Layout')
          button.btn.btn-menu-button(data-toggle="modal" data-target="#CommandInputForm" data-title="Save Layout" data-submit="SaveLayout" data-custom='[{"label":"Enter Layout Name ", "type":"field", "dtype":"text"}]') 
            i.cdr-nav-icons.fa.fa-save
        <!--ul.navbar-nav.cdr-nav-btn#noop-test -->
        <!--  button.btn.btn-outline-primary(data-cdr={cmd:{name:'/CFE/CFE_ES_NoopCmd'},indicator:'cmd'}) -->
        <!--    i.cdr-nav-icons No-Op -->

    <!-- Central Content Area -->
    div.cdr-container.ui.main.text
      div.cdr-content-wrapper
        div#cdr-layout-container
        div#cdr-app-menu 
          div#cdr-panel-layout-switch.cdr-center-btn-group.btn-group(role="group" aria-label="Toggle Menus")
            button#cdr-layout-menu-toggle.btn.cdr-nav-pane-selector.active(data-tooltip='true' title='A layout(collection of webpages) directory') Layout
            button#cdr-panel-menu-toggle.btn.cdr-nav-pane-selector(data-tooltip='true' title='A webpage directory') Panels
            button#cdr-widget-menu-toggle.btn.cdr-nav-pane-selector(data-tooltip='true' title='A widget directory') Widgets
          div#cdr-panel-menu-container.cdr-menu-container(data-open="false")
          div#cdr-layout-menu-container.cdr-menu-container.menuShow(data-open="true")
          div#cdr-widget-menu-container.cdr-menu-container(data-open="false")
    <!-- Bottom Navigation Bar -->
    nav#cdr-nav-btm.navbar.fixed-bottom.navbar-expand-lg.navbar-dark.bg-dark
      ul.navbar-nav#cdr-btm-nav-utility
        a#cdr-docs-container(onclick='showDocumentation()')
          i.fa.fa-file
      ul.navbar-nav.mr-auto
      ul#cdr-well-top-bottom.navbar-nav.cdr-well
    
    <!-- Custom Scripts -->
    
    script(type="text/javascript").

      var CommanderTlmDataElements = [];
      
      function UnbindCdrDataFromVariableServer(jqObj) {
          if(typeof jqObj === 'undefined') {
              jqObj = $('body');
          }

          jqObj.find('[data-cdr].cdr-bound').each(function () {
              var obj = $(this).attr('data-cdr');
              
              var jsonObj;
              if (typeof obj === 'string' || obj instanceof String) {
                  /* It's a string, so convert it to an object. */
                  jsonObj = JSON.parse(obj);
              }
              else if (typeof obj === 'object' || obj instanceof Object) {
                  /* It's alaready an object, so just reference it. */
                  jsonObj = obj;
              }
              else {
                  /* It's something else that we don't understand.  Skip it. */
                  console.log('data-cdr improperly formatted.  Must be either a string or an object.');
                  return;
              }
              
              if (jsonObj.hasOwnProperty('tlm')) {
                  /* This is a telemetry object. */
                  session.unsubscribe(jsonObj.tlm);
                  
                  for(var i = CommanderTlmDataElements.length - 1; i >= 0; i--) {
                      var tlmDataObj = CommanderTlmDataElements[i].attr('data-cdr');
                      var tlmDataJsonObj;
		              
                      if (typeof tlmDataObj === 'string' || tlmDataObj instanceof String) {
                          /* It's a string, so convert it to an object. */
                          tlmDataJsonObj = JSON.parse(tlmDataObj);
                      } else if (typeof tlmDataObj === 'object' || tlmDataObj instanceof Object) {
                          /* It's already an object, so just reference it. */
                          tlmDataJsonObj = tlmDataObj;
                      } else {
                          /* It's something else that we don't understand.  Skip it. */
                          console.log('data-cdr improperly formatted.  Must be either a string or an object.');
                          return;
                      }
                  
                      if(tlmDataJsonObj.uuid === jsonObj.uuid) {
                          CommanderTlmDataElements.splice(i, 1);
                      }
                  }
              }
          });
      };
      
      
      function BindCdrDataToVariableServer(jqObj) {
          if(typeof jqObj === 'undefined') {
              jqObj = $('body');
          }
            
          jqObj.find('[data-cdr]').not('.cdr-bound').each(function () {
              var obj = $(this).attr('data-cdr');
              
              var jsonObj;
              if (typeof obj === 'string' || obj instanceof String) {
                  /* It's a string, so convert it to an object. */
                  jsonObj = JSON.parse(obj);
              }
              else if (typeof obj === 'object' || obj instanceof Object) {
                  /* It's alaready an object, so just reference it. */
                  jsonObj = obj;
              }
              else {
                  /* It's something else that we don't understand.  Skip it. */
                  console.log('data-cdr improperly formatted.  Must be either a string or an object.');
                  return;
              }
              
              if (jsonObj.hasOwnProperty('tlm')) {
                  /* This is a telemetry object. */
                  var tlmObj = jsonObj.tlm;
                  
                  if (jsonObj.hasOwnProperty('uuid')) {
                      /* We already bound this element. */
                  } else {
                      jsonObj.uuid = generateUUID();
                      $(this).attr('data-cdr', JSON.stringify(jsonObj));
                      session.subscribe(tlmObj, processTelemetryUpdate);
                      CommanderTlmDataElements.push($(this));
                      $(this).addClass('cdr-bound');
                  }
              }
              if (jsonObj.hasOwnProperty('cmd')) {
                  /* This is a command object. */
                  var cmdObj = jsonObj.cmd;
                  var btnObj = $(this);
                  $(this).addClass('cdr-bound');
                  if (cmdObj.hasOwnProperty('uuid')) {
                      /* We already bound this element. */
                  } else {
                      session.getCmdDef({name:cmdObj.name}, function (cmdInfo) {
                          var uuid = generateUUID();
                          cmdInfo.uuid = uuid;
                          cmdObj.uuid = uuid;
                          btnObj.attr('data-cdr', JSON.stringify(jsonObj));
                          /* Copy any arguments we have from the command button into the cmdInfo struct. */
                          if (cmdObj.hasOwnProperty('argument')) {
                            for (i = 0; i < cmdObj.argument.length; i++) {
                              for (j = 0; j < cmdInfo.argument.length; j++) {
                                  if (cmdInfo.argument[j].name == cmdObj.argument[i].name) {
                                      cmdInfo.argument[j].value = cmdObj.argument[i].value;
                                  }
                              }
                            }
                          }
                      
                          if ( isTemplateCommand( cmdInfo ) == false ) {
                              /*
                               * This is a fully instantiated command. No need to
                               * create a popup form. Just send the command when
                               * the user clicks the button.
                               */
                              var args = {};
                              if ( cmdInfo.hasOwnProperty( 'argument' ) ) {
                                  for ( var i = 0; i < cmdInfo.argument.length; i++ ) {
                                      args[ cmdInfo.argument[ i ].name ] = cmdInfo.argument[ i ].value
                                  }
                              }
                              btnObj[ 0 ].onclick = function( eventObject ) {
                                  var cb = undefined;
                                  if(cmdInfo.hasOwnProperty('returnType') == true) {
                                      cb = function(error, response) {
                                          var text = 'Error: ' + error + '\nResponse: ' + response;
                                          alert(text);
                                      }
                                  }
                        
                                  if(typeof cmdObj.cb === 'function') {
                                      cb = cmdObj.cb;  
                                  } else if(typeof cmdObj.cb === 'string') {
                                      cb = window[cmdObj.cb];
                                  }

                                  session.sendCommand( {
                                      ops_path: cmdInfo.name,
                                      args: args
                                  }, cb );
                              };
                          } else {
                              /*
                               * This is not a fully instantiated command. We need
                               * to present a popup form to allow the user to
                               * enter the remaining command arguments before
                               * sending the command.
                               *
                               * First, generate UUIDs to be used later as element
                               * IDs.
                               */
                              for ( i = 0; i < cmdInfo.argument.length; i++ ) {
                                  cmdInfo.argument[ i ].uuid = uuid + "_" + cmdInfo.argument[ i ].name;
                              }
                              /*
                               * Next set stringLength for string parameters to be
                               * used for form validation later.
                               */
                              for ( i = 0; i < cmdInfo.argument.length; i++ ) {
                                  if ( cmdInfo.argument[ i ].type === 'string' ) {
                                      /*
                                       * Add a new stringLength (in bytes)
                                       * attribute for parameter validation later.
                                       */
                                      cmdInfo.argument[ i ].stringLength = cmdOut.argument[ i ].bitSize / 8;
                                  }
                              }
      
                              /* Make button fire modal */
                              btnObj.attr( 'data-toggle', 'modal' );
                              btnObj.attr( 'data-target', '#CommandInputForm' );
                              btnObj.attr( 'data-title', 'Submit ' + cmdInfo.name + ' Arguments' );
                              btnObj.attr( 'data-submit', 'sendCmd' );
                              var argArray = [];
      
                              for ( var i in cmdInfo.argument ) {
                                var label = cmdInfo.argument[ i ].name;
                                var type = cmdInfo.argument[ i ].type;
                                var value = cmdInfo.argument[ i ].value;
                                switch ( type ) {
                                  case 'char': {
                                      /* integer action */
                                      argArray.push( {
                                          'label': label,
                                          'type': 'field',
                                          'dtype': 'text',
                                          'value': value
                                      } );
                                      break;
                                  }
      
                                  case 'uint8': {
                                      /* integer action */
                                      argArray.push( {
                                          'label': label,
                                          'type': 'field',
                                          'dtype': 'integer',
                                          'value': value
                                      } );
                                      break;
                                  }
      
                                  case 'int8': {
                                      /* integer action */
                                      argArray.push( {
                                          'label': label,
                                          'type': 'field',
                                          'dtype': 'integer',
                                          'value': value
                                      } );
                                      break;
                                  }
      
                                  case 'string': {
                                      /* integer action */
                                      argArray.push( {
                                          'label': label,
                                          'type': 'field',
                                          'dtype': 'text',
                                          'value': value
                                      } );
                                      break;
                                  }
      
                                  case 'uint16': {
                                      /* integer action */
                                      argArray.push( {
                                          'label': label,
                                          'type': 'field',
                                          'dtype': 'text',
                                          'value': value
                                      } );
                                      break;
                                  }
      
                                  case 'int16': {
                                      /* integer action */
                                      argArray.push( {
                                          'label': label,
                                          'type': 'field',
                                          'dtype': 'text',
                                          'value': value
                                      } );
                                      break;
                                  }
      
                                  case 'uint32': {
                                      /* integer action */
                                      argArray.push( {
                                          'label': label,
                                          'type': 'field',
                                          'dtype': 'text',
                                          'value': value
                                      } );
                                      break;
                                  }
      
                                  case 'int32': {
                                      /* integer action */
                                      argArray.push( {
                                          'label': label,
                                          'type': 'field',
                                          'dtype': 'text',
                                          'value': value
                                      } );
                                      break;
                                  }
      
                                  case 'float': {
                                      /* integer action */
                                      argArray.push( {
                                          'label': label,
                                          'type': 'field',
                                          'dtype': 'float',
                                          'value': value
                                      } );
                                      break;
                                  }
      
                                  case 'double': {
                                      /* integer action */
                                      argArray.push( {
                                          'label': label,
                                          'type': 'field',
                                          'dtype': 'float',
                                          'value': value
                                      } );
                                      break;
                                  }
      
                                  case 'boolean': {
                                      /* integer action */
                                      argArray.push( {
                                          'label': label,
                                          'type': 'field',
                                          'dtype': 'integer',
                                          'value': value
                                      } );
                                      break;
                                  }
      
                                  case 'uint64': {
                                      /* integer action */
                                      argArray.push( {
                                          'label': label,
                                          'type': 'field',
                                          'dtype': 'text',
                                          'value': value
                                      } );
                                      break;
                                  }
      
                                  case 'int64': {
                                      /* integer action */
                                      argArray.push( {
                                          'label': label,
                                          'type': 'field',
                                          'dtype': 'text',
                                          'value': value
                                      } );
                                      break;
                                  }
                                } // switch
                                
                                btnObj.attr( 'data-custom', JSON.stringify( argArray ) );
                              } // for
                          } // if...else
                      }); // session.getCmdDef
                  } // if...else
              }; // if
          }); // jqObj.find
      }; // function BindCdrDataToVariableServer   
     
      var processTelemetryUpdate = function (param) {
        var found = false;
        for (var k = 0; k < param.length; k++) {
          for (var i = 0; i < CommanderTlmDataElements.length; i++) {
            var jsonObj = JSON.parse(CommanderTlmDataElements[i].attr('data-cdr'));
            for (var j = 0; j < jsonObj.tlm.length; j++) {
              var tlmObj = CommanderTlmDataElements[i];

              if(tlmObj.is(':visible')) {
                  if (jsonObj.tlm[j].name == param[k].opsPath) {
                    
                    found = true;
                    if(typeof param[k].sample !== 'undefined') {
                      var value = param[k].sample[0].value;
    	                
                      if(tlmObj.hasClass('format-microseconds')){
                        value = GetFormattedSystemTimeInMicroseconds(param.engValue.uint32Value)
                      } 
    	
                      if(tlmObj.is(':checkbox')) {
                        if((value == true) || (value > 0.0))
                          tlmObj.prop( 'checked', true );
                        else
                          tlmObj.prop( 'checked', false );
                      }
    	                
                      if(tlmObj.is('input')) {
                        tlmObj.prop('value', value );
                      } 
    	                  
                      if(jsonObj.tlm[j].hasOwnProperty('format')) {
                        value = sprintf(jsonObj.tlm[j].format, value);
                      } 
    	                           
                      if((tlmObj.hasClass('display-units') || !tlmObj.hasClass('no-display-units')) &&
                        !tlmObj.hasClass('format-microseconds')) {
                        if(tlmObj[0].hasAttribute('data-units')) {
                          value = value + ' ' + tlmObj[0].getAttribute('data-units');
                        }
                      }
                        
                      if(typeof tlmObj === 'object') {
                        if(jsonObj.tlm[j].hasOwnProperty('class')) {
                          var classSet = false;
                        
                          var setClassObj = jsonObj.tlm[j].class;
                          
                          for(var evalIdx = 0; evalIdx < setClassObj.length; ++evalIdx) {
                            var evalString = '' + value + ' ' + setClassObj[evalIdx].eval;
                            var evalResult = eval(evalString);
                            if(evalResult == true) {
                              tlmObj.removeClass(jsonObj.tlm[j].classTemp);
                              tlmObj.addClass(setClassObj[evalIdx].class);
                              jsonObj.tlm[j].classTemp = setClassObj[evalIdx].class;
                              classSet = true;
                              CommanderTlmDataElements[i].attr('data-cdr', JSON.stringify(jsonObj));
                            }
                          }
                          
                          if(classSet == false) {
                            tlmObj.removeClass(jsonObj.tlm[j].classTemp);
                          }
                        }                      
                      
                        var updateText = true;
                        
                        if(jsonObj.tlm[j].hasOwnProperty('notext') == true) {
                          if(jsonObj.tlm[j].notext == true) {
                            updateText = false;
                          }
                        }
                        
                        if(updateText == true) {
                          tlmObj.text(value);
                        }
                      } else {
                        console.log(tlmObj);
                      }
                    }
                  }
                }
              }
          
            if (found == false) {
              session.unsubscribe({tlm:[{'name':param[k].opsPath}]});
            }
          }
        }
      };

      function isTemplateCommand(commandInfo) {
        var found = false;
        if(commandInfo.hasOwnProperty('argument')){
          if(commandInfo.argument.length > 0){
            /* Look for at least 1 unspecified value. */
            for(i=0; i < commandInfo.argument.length; i++){
              if(!commandInfo.argument[i].hasOwnProperty('value')){
                found = true;
              }
            }
          }
        }
        return found;
      }
      
      var GetFormattedSystemTimeInMicroseconds = function(inTime) {
        hours = Math.floor(inTime / (1000000*60*60))
        remainder = inTime - (hours * (1000000*60*60))
        minutes = Math.floor(remainder / (1000000*60))
        remainder = remainder - (minutes * (1000000*60))
        seconds = remainder / 1000000.0
        
        if(minutes < 10.0) {
          strMinutes = '0' + minutes
        } else {
          strMinutes = minutes
        }
        if(seconds < 10.0) {
          strSeconds = '0' + seconds
        } else {
          strSeconds = seconds
        }
        
        value = '' + hours + ':' + strMinutes + ':' + strSeconds
        return value
      }
      
      var BoolLedEnable = function(tlmObj) {
          tlmObj.removeClass('bool-led-off')
          tlmObj.addClass('bool-led-on')
          if(tlmObj.hasClass('bool-led-error')) {
              tlmObj.addClass('bool-led-on-error')
          }
          else if(tlmObj.hasClass('bool-led-warn')) {
              tlmObj.addClass('bool-led-on-warn')
          } else {
              tlmObj.addClass('bool-led-on-info')
          }
      }
      
      var BoolLedDisable = function(tlmObj) {
          tlmObj.removeClass('bool-led-on')
          tlmObj.addClass('bool-led-off')
          if(tlmObj.hasClass('bool-led-error')) {
              tlmObj.removeClass('bool-led-on-error')
          }
          else if(tlmObj.hasClass('bool-led-warn')) {
              tlmObj.removeClass('bool-led-on-warn')
          } else {
              tlmObj.removeClass('bool-led-on-info')
          }
      }
      
      var generateUUID = function(){
        var d = new Date().getTime();
        if(window.performance && typeof window.performance.now === "function"){
          d += performance.now(); //use high-precision timer if available
        }
        var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
          var r = (d + Math.random()*16)%16 | 0;
          d = Math.floor(d/16);
          return (c=='x' ? r : (r&0x3|0x8)).toString(16);
        });
        return uuid;
      }
      
      /**
       * Some command invoke a modal or a form to be filled out by the user. The
       * submit action of that form will invoke this function. This function scrapes
       * the modal for form information and generates a complete command object and
       * sends it out.
       * @return {undefined}
       */
      function sendCmd() {
        var args = {};
        var labels = $( "#CommandInputForm" ).find( 'label' );
        for ( var i = 0; i < labels.length; ++i ) {
          var label = labels[ i ].textContent;
          var value = labels[ i ].control.value;
          args[ label ] = value;
        }
        var cmdObj = JSON.parse( $( "#CommandInputForm" ).attr( 'data-info' ) );
        var cb = undefined;
        cb = function(error, response) {
          var text = 'Error: ' + error + '\nResponse: ' + response;
          alert(text);
        }
                        
        if(typeof cmdObj.cb === 'function') {
            cb = cmdObj.cb;  
        } else if(typeof cmdObj.cb === 'string') {
            cb = window[cmdObj.cb];
        }
                        
        session.sendCommand( {
          ops_path: cmdObj.cmd.name,
          args: args
        }, cb )
      }
      
    
    script(type="text/javascript" src='/commander/app/util.js') 
    script(type="text/javascript" src='/commander/client.js') 
    script(type="text/javascript" src='/commander/app/controller.js') 

    script(type="text/javascript" src='/commander/app/ui/navtree.js') 
    script(type="text/javascript" src='/commander/app/ui/layout.js') 
    script(type="text/javascript" src='/commander/app/ui/command_input_form.js') 
    script(type="text/javascript" src='/commander/app/ui/misc.js')
    script(type="text/javascript" src='/commander/data_plot.js') 
