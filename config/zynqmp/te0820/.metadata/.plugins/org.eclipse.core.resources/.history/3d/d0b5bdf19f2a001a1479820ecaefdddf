/****************************************************************************
*
*   Copyright (c) 2017 Windhover Labs, L.L.C. All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions
* are met:
*
* 1. Redistributions of source code must retain the above copyright
*    notice, this list of conditions and the following disclaimer.
* 2. Redistributions in binary form must reproduce the above copyright
*    notice, this list of conditions and the following disclaimer in
*    the documentation and/or other materials provided with the
*    distribution.
* 3. Neither the name Windhover Labs nor the names of its 
*    contributors may be used to endorse or promote products derived 
*    from this software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
* FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
* COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
* BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
* OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
* AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
* LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
* ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
* POSSIBILITY OF SUCH DAMAGE.
*
*****************************************************************************/

#include <nuttx/symtab.h>
#include "osapi.h"
#include "FreeRTOS.h"
#include "semphr.h"
#include <string.h>


#define FAR

typedef struct
{
  char *sym_name;          /* A pointer to the symbol name string */
  //FAR const void *sym_value;         /* The value associated witht the string */
} symtab_s2;

//OS_DL_Exports
symtab_s exports;


/*
** Need to define the OS Module table here.
** osconfig.h will have the maximum number of loadable modules defined.
*/
OS_module_record_t OS_module_table[OS_MAX_MODULES];

/*
** The Mutex for protecting the above table
*/
SemaphoreHandle_t OS_module_table_mut;



int32 OS_ModuleTableInit( void )
{
    unsigned int i;

    /*
    ** Initialize Module Table
    */
    for(i = 0; i < OS_MAX_MODULES; ++i)
    {
        OS_module_table[i].entry_point = 0;
        OS_module_table[i].host_module_id = 0;
        OS_module_table[i].addr.valid = FALSE;
        strcpy(OS_module_table[i].name,"");
        strcpy(OS_module_table[i].filename,"");
    }

    /*
    ** Create the Module Table mutex
    */
    OS_module_table_mut = xSemaphoreCreateMutex();
    if ( OS_module_table_mut != NULL )
    {
        return(OS_SUCCESS);
    }
    else
    {
        return(OS_ERROR);
    }
}



int32 OS_SymbolLookup(cpuaddr *symbol_address, const char *symbol_name )
{
    OS_printf("%s\n", __FUNCTION__);

	return OS_ERROR;
}



int32 OS_SymbolTableDump( const char *filename, uint32 size_limit )
{
	return 0;
//    int32 status;
//
//    int low  = 0;
//    int high = nsyms - 1;
//    int mid;
//    int cmp;
//
//    /* Loop until the range has been isolated to a single symbol table
//     * entry that may or may not match the search name.
//     */
//
//    DEBUGASSERT(symtab != NULL && name != NULL);
//    while (low < high)
//      {
//        /* Compare the name to the one in the middle.  (or just below
//         * the middle in the case where one is even and one is odd).
//         */
//
//        mid = (low + high) >> 1;
//        cmp = strcmp(name, symtab[mid].sym_name);
//        if (cmp < 0)
//          {
//            /* name < symtab[mid].sym_name
//             *
//             * NOTE: Because of truncation in the calculation of 'mid'.
//             * 'mid' could be equal to 'low'
//             */
//
//            high = mid > low ? mid - 1 : low;
//          }
//        else if (cmp > 0)
//          {
//            /* name > symtab[mid].sym_name */
//
//            low = mid + 1;
//          }
//        else
//          {
//            /* symtab[mid].sym_name == name */
//
//            return &symtab[mid];
//          }
//      }
//
//    /* low == high... One final check.  We might not have actually tested
//     * the final symtab[] name.
//     *
//     *   Example: Only the last pass through loop, suppose low = 1, high = 2,
//     *   mid = 1, and symtab[high].sym_name == name.  Then we would get here with
//     *   low = 2, high = 2, but symtab[2].sym_name was never tested.
//     */
//
//    return strcmp(name, symtab[low].sym_name) == 0 ? &symtab[low] : NULL;
}



int32 OS_ModuleLoad( uint32 *module_id, const char *module_name, const char *filename )
{
    OS_printf("%s\n", __FUNCTION__);

	return OS_ERROR;
}



int32 OS_ModuleUnload( uint32 module_id )
{
    OS_printf("%s\n", __FUNCTION__);

	return OS_ERROR;
}



int32 OS_ModuleInfo( uint32 module_id, OS_module_prop_t *module_info )
{
    /*
    ** Check the parameter
    */
    if ( module_info == 0 )
    {
        return(OS_INVALID_POINTER);
    }

    /*
    ** Check the module_id
    */
    if ( module_id >= OS_MAX_MODULES )
    {
        return(OS_ERR_INVALID_ID);
    }

    /*
    ** Fill out the module info
    */
    module_info->entry_point = OS_module_table[module_id].entry_point;
    module_info->host_module_id = OS_module_table[module_id].host_module_id;
    strncpy(module_info->filename, OS_module_table[module_id].filename , OS_MAX_PATH_LEN);
    strncpy(module_info->name, OS_module_table[module_id].name, OS_MAX_API_NAME);

    /*
    ** Address info is currently not valid on Linux
    */
    module_info->addr.valid = FALSE;
    module_info->addr.code_address = 0;
    module_info->addr.code_size = 0;
    module_info->addr.data_address = 0;
    module_info->addr.data_size = 0;
    module_info->addr.bss_address = 0;
    module_info->addr.bss_size = 0;
    module_info->addr.flags = 0;

    return OS_SUCCESS;
}


