extends ../../../web_includes/common/layout

block includes
  include ../../../web_includes/common/common_includes.pug

block header
  
  style.
    .nav-tabs > li .close {
      margin: -2px 0 0 10px;
      font-size: 18px;
    }
    
        .chart {
            shape-rendering: crispEdges;
        }

        .mini text {
            font: 9px sans-serif;   
        }

        .main text {
            font: 12px sans-serif;  
        }

        .miniItem {
            fill: green;
            stroke-width: 1; 
            vector-effect: non-scaling-stroke;
            stroke: black;
            stroke-location: inside;
        }

        .miniItemError {
            fill: red;
            stroke-width: 1; 
            vector-effect: non-scaling-stroke;
            stroke: darkred;
            stroke-location: inside;
        }

        .brush .extent {
            stroke: gray;
            fill: dodgerblue;
            fill-opacity: .365;
        }
    
        .d3-tip {
          line-height: 1;
          font-weight: bold;
          padding: 12px;
          background: rgba(0, 0, 0, 0.8);
          color: #fff;
          border-radius: 2px;
        }
        
        /* Creates a small triangle extender for the tooltip */
        .d3-tip:after {
          box-sizing: border-box;
          display: inline;
          font-size: 10px;
          width: 100%;
          line-height: 1;
          color: rgba(0, 0, 0, 0.8);
          content: "\25BC";
          position: absolute;
          text-align: center;
        }
        
        /* Style northward tooltips differently */
        .d3-tip.n:after {
          margin: -1px 0 0 0;
          top: 100%;
          left: 0;
        }
    
        .axis line, .axis path {
            stroke: black;
            color: #0f0;
        }
    
    
    
  .row
    article.col-xs-12.col-sm-12.col-md-12.col-lg-12
      #wid-id-0.jarviswidget(data-widget-editbutton='false')
        header
          ul#widget-tab-navtab.nav.nav-tabs
            li.active
              a(data-toggle='tab' href='#tabNav') 
                i.fa.fa-lg.fa-arrow-circle-o-down
                span.hidden-mobile.hidden-tablet File Browser
        div
          .jarviswidget-editbox
          .widget-body.no-padding
            #widget-tab-content.tab-content.padding-10
              #tabNav.tab-pane.fade.in.active
                #FileBrowserContainer      
                
               
  script(type='text/javascript').    
    /* remove previous elems */
    if($('.DTTT_dropdown.dropdown-menu').length){
        $('.DTTT_dropdown.dropdown-menu').remove();
    }
    
    // Needed if you are rendering multiple tables in ajax version
    //var tableDestroyer = [];

    var oFileBrowser;
    
    // pagefunction 
    var pagefunction = function() {        
        /* // DOM Position key index //
        
            l - Length changing (dropdown)
            f - Filtering input (search)
            t - The Table! (datatable)
            i - Information (records)
            p - Pagination (paging)
            r - pRocessing 
            < and > - div elements
            <"#id" and > - div with an id
            <"class" and > - div with a class
            <"#id.class" and > - div with an id and class
            
            Also see: http://legacy.datatables.net/usage/features
        */  
        
        oFileBrowser = $('#FileBrowser').DataTable({
            "bFilter": true,
            "bInfo": true,
            "bLengthChange": true,
            "bAutoWidth": true,
            "bPaginate": true,
            "bStateSave": true,
            "oTableTools": {
                 "aButtons": [
                 "copy",
                 "csv",
                 "xls",
                    {
                        "sExtends": "pdf",
                        "sTitle": "PDF",
                        "sPdfMessage": "PDF Export",
                        "sPdfSize": "letter"
                    },
                    {
                        "sExtends": "print",
                        "sMessage": "Generated by Sage <i>(press Esc to close)</i>"
                    }
                 ],
                "sSwfPath": "js/plugin/datatables/swf/copy_csv_xls_pdf.swf"
            },
            "columnDefs": [
                {
                    "targets": [ 0 ],
                    "sortable": false
                },
                {
                    "targets": [ 1 ],
                    "type": "numeric"
                },
                {
                    "targets": [ 2 ],
                    "type": "date",
                    "sortable": false
                },
                {
                    "targets": [ 4 ],
                    "visible": false,
                    "searchable": false
                }
            ],
            "sDom": "<'dt-toolbar'<'col-xs-8'f><'col-xs-2'T><'col-xs-2'l>r>"+
                    "t"+
                    "<'dt-toolbar-footer'<'col-xs-6'i><'col-xs-6'p>>",
        });
                       
        // Apply the filter
        $("#FileBrowser thead th input[type=text]").on( 'keyup change', function () { 
            oFileBrowser
                .column( $(this).parent().index()+':visible' )
                .search( this.value )
                .draw();
                
        });
        
        $("#FileBrowser thead th input[type=text]").on( 'keyup change', function () { 
            oFileBrowser
                .column( $(this).parent().index()+':visible' )
                .search( this.value )
                .draw();
                
        } );
        
        $('#FileBrowser tbody').on('click', 'tr', function () {
            var browser = $('#FileBrowser').dataTable();
            var aPos = browser.fnGetPosition(this); 
            var fullName = browser.fnGetData(aPos)[4]; 
            var fileName = browser.fnGetData(aPos)[3]; 
            
            sage.callFunc('CfeLP_GetReport', {FileName:fullName}, function(err, resp) {
                if(resp != undefined)
                {
                    var mainTabID = 'tab-' + tabID;
                    tabID++;
                    var entryTblID;
                    
                    switch(resp.Header.SubType)
                    {
                      case 'CFE_ES_ERLOG':
                      {    
                        for(var i = 0; i < resp.LogEntries.length; i++)
                        {   
                          var entryTabID = 'tab-' + tabID;
                          tabID++;
                          resp.LogEntries[i].TabID = entryTabID;
                        }
                        break
                      }
                        
                      case 'CFE_ES_SYSLOG':
                      {
                        break;
                      }
                      
                      case 'CFE_ES_QUERYALL':
                      {    
                        for(var i = 0; i < resp.AppInfo.length; i++)
                        {  
                          var entryTabID = 'tab-' + tabID;
                          tabID++;
                          resp.AppInfo[i].TabID = entryTabID;
                        }
                        break
                      }
                      
                      case 'CFE_SB_PIPEDATA':
                      {    
                        for(var i = 0; i < resp.PipeData.length; i++)
                        {  
                          var entryTabID = 'tab-' + tabID;
                          tabID++;
                          resp.PipeData[i].TabID = entryTabID;
                        }
                        break
                      }
                      
                      case 'CFE_SB_ROUTEDATA':
                      {    
                        for(var i = 0; i < resp.RouteData.length; i++)
                        {  
                          var entryTabID = 'tab-' + tabID;
                          tabID++;
                          resp.RouteData[i].TabID = entryTabID;
                        }
                        break;
                      }
                      
                      case 'CFE_SB_MAPDATA':
                      case 'CFE_ES_CDS_REG':
                      case 'CFE_ES_QUERYALLTASKS':
                      case 'CFE_ES_PERFDATA':
                      {
                          entryTblID = 'tbl-' + tabID;
                          tabID++;
                          resp.TableID = entryTblID;
                          break;
                      }
                      
                      case 'CFE_EVS_APPDATA':
                      {
                          entryAccID = 'acc-' + tabID;
                          tabID++;
                          resp.AccordionID = entryAccID;
                          
                          for(var i = 0; i < resp.AppData.length; i++)
                          {  
                            var entryColID = 'col-' + tabID;
                            tabID++;
                            resp.AppData[i].CollapseID = entryColID;
                          
                            var entryTableID = 'tbl-' + tabID;
                            tabID++;
                            resp.AppData[i].TableID = entryTableID;
                          }
                          
                          break;
                      }
                      
                      case 'CFE_TBL_REG':
                      {
                          entryAccID = 'acc-' + tabID;
                          tabID++;
                          resp.AccordionID = entryAccID;
                          
                          for(var i = 0; i < resp.TblReg.length; i++)
                          {  
                            var entryColID = 'col-' + tabID;
                            tabID++;
                            resp.TblReg[i].CollapseID = entryColID;
                          }
                          
                          break;
                      }
                    }
                    
                    var tab = addTab( mainTabID, fileName, LogReport(resp) );
                    
                    switch(resp.Header.SubType)
                    {
                      case 'CFE_SB_MAPDATA':
                      {
                        oNewReport = $('#' + entryTblID).DataTable({
                            "bFilter": true,
                            "bInfo": true,
                            "bLengthChange": true,
                            "bAutoWidth": true,
                            "bPaginate": true,
                            "bStateSave": true,
                            "oTableTools": {
                                 "aButtons": [
                                 "copy",
                                 "csv",
                                 "xls",
                                    {
                                        "sExtends": "pdf",
                                        "sTitle": "PDF",
                                        "sPdfMessage": "PDF Export",
                                        "sPdfSize": "letter"
                                    },
                                    {
                                        "sExtends": "print",
                                        "sMessage": "Generated by Sage <i>(press Esc to close)</i>"
                                    }
                                 ],
                                "sSwfPath": "js/plugin/datatables/swf/copy_csv_xls_pdf.swf"
                            },
                            "columnDefs": [
                                {
                                    "targets": [ 0 ],
                                    "sortable": true,
                                    "type": "numeric"
                                },
                                {
                                    "targets": [ 1 ],
                                    "sortable": true,
                                    "type": "numeric"
                                }
                            ],
                            "sDom": "<'dt-toolbar'<'col-xs-8'f><'col-xs-2'T><'col-xs-2'l>r>"+
                                    "t"+
                                    "<'dt-toolbar-footer'<'col-xs-6'i><'col-xs-6'p>>",
                        });
                                       
                        // Apply the filter
                        $("#" + entryTblID + " thead th input[type=text]").on( 'keyup change', function () { 
                            oNewReport
                                .column( $(this).parent().index()+':visible' )
                                .search( this.value )
                                .draw();        
                        });
                        
                        $("#" + entryTblID + " thead th input[type=text]").on( 'keyup change', function () { 
                            oNewReport
                                .column( $(this).parent().index()+':visible' )
                                .search( this.value )
                                .draw();
                                
                        } );
                        
                        break;
                      }
                      
                      case 'CFE_ES_CDS_REG':
                      {
                        oNewReport = $('#' + entryTblID).DataTable({
                            "bFilter": true,
                            "bInfo": true,
                            "bLengthChange": true,
                            "bAutoWidth": true,
                            "bPaginate": true,
                            "bStateSave": true,
                            "oTableTools": {
                                 "aButtons": [
                                 "copy",
                                 "csv",
                                 "xls",
                                    {
                                        "sExtends": "pdf",
                                        "sTitle": "PDF",
                                        "sPdfMessage": "PDF Export",
                                        "sPdfSize": "letter"
                                    },
                                    {
                                        "sExtends": "print",
                                        "sMessage": "Generated by Sage <i>(press Esc to close)</i>"
                                    }
                                 ],
                                "sSwfPath": "js/plugin/datatables/swf/copy_csv_xls_pdf.swf"
                            },
                            "columnDefs": [
                                {
                                    "targets": [ 0 ],
                                    "sortable": true,
                                },
                                {
                                    "targets": [ 2 ],
                                    "sortable": true,
                                    "type": "numeric"
                                },
                                {
                                    "targets": [ 3 ],
                                    "sortable": true,
                                }
                            ],
                            "sDom": "<'dt-toolbar'<'col-xs-8'f><'col-xs-2'T><'col-xs-2'l>r>"+
                                    "t"+
                                    "<'dt-toolbar-footer'<'col-xs-6'i><'col-xs-6'p>>",
                        });
                                       
                        // Apply the filter
                        $("#" + entryTblID + " thead th input[type=text]").on( 'keyup change', function () { 
                            oNewReport
                                .column( $(this).parent().index()+':visible' )
                                .search( this.value )
                                .draw();        
                        });
                        
                        $("#" + entryTblID + " thead th input[type=text]").on( 'keyup change', function () { 
                            oNewReport
                                .column( $(this).parent().index()+':visible' )
                                .search( this.value )
                                .draw();
                                
                        } );
                        
                        break;
                      }
                      
                      case 'CFE_ES_QUERYALLTASKS':
                      {
                        oNewReport = $('#' + entryTblID).DataTable({
                            "bFilter": true,
                            "bInfo": true,
                            "bLengthChange": true,
                            "bAutoWidth": true,
                            "bPaginate": true,
                            "bStateSave": true,
                            "oTableTools": {
                                 "aButtons": [
                                 "copy",
                                 "csv",
                                 "xls",
                                    {
                                        "sExtends": "pdf",
                                        "sTitle": "PDF",
                                        "sPdfMessage": "PDF Export",
                                        "sPdfSize": "letter"
                                    },
                                    {
                                        "sExtends": "print",
                                        "sMessage": "Generated by Sage <i>(press Esc to close)</i>"
                                    }
                                 ],
                                "sSwfPath": "js/plugin/datatables/swf/copy_csv_xls_pdf.swf"
                            },
                            "columnDefs": [
                                {
                                    "targets": [ 0 ],
                                    "sortable": true,
                                },
                                {
                                    "targets": [ 1 ],
                                    "sortable": true,
                                },
                                {
                                    "targets": [ 2 ],
                                    "sortable": true,
                                    "type": "numeric"
                                },
                                {
                                    "targets": [ 3 ],
                                    "type": "numeric"
                                }
                            ],
                            "sDom": "<'dt-toolbar'<'col-xs-8'f><'col-xs-2'T><'col-xs-2'l>r>"+
                                    "t"+
                                    "<'dt-toolbar-footer'<'col-xs-6'i><'col-xs-6'p>>",
                        });
                                       
                        // Apply the filter
                        $("#" + entryTblID + " thead th input[type=text]").on( 'keyup change', function () { 
                            oNewReport
                                .column( $(this).parent().index()+':visible' )
                                .search( this.value )
                                .draw();        
                        });
                        
                        $("#" + entryTblID + " thead th input[type=text]").on( 'keyup change', function () { 
                            oNewReport
                                .column( $(this).parent().index()+':visible' )
                                .search( this.value )
                                .draw();
                                
                        } );
                        
                        break;
                      }
                      
                      case 'CFE_ES_PERFDATA':
                      {
                        var myVar = setTimeout(function () {
                                drawPerfChart(resp);
                            }, 500);
                            
                        break;
                      }
                      
                      case 'CFE_EVS_APPDATA':
                      {
                        for(var i = 0; i < resp.AppData.length; i++)
                        {  
                          entryTblID = resp.AppData[i].TableID;
                        
                          oNewReport = $('#' + entryTblID).DataTable({
                              "bFilter": true,
                              "bInfo": true,
                              "bLengthChange": true,
                              "bAutoWidth": true,
                              "bPaginate": true,
                              "bStateSave": true,
                              "oTableTools": {
                                   "aButtons": [
                                   "copy",
                                   "csv",
                                   "xls",
                                      {
                                          "sExtends": "pdf",
                                          "sTitle": "PDF",
                                          "sPdfMessage": "PDF Export",
                                          "sPdfSize": "letter"
                                      },
                                      {
                                          "sExtends": "print",
                                          "sMessage": "Generated by Sage <i>(press Esc to close)</i>"
                                      }
                                   ],
                                  "sSwfPath": "js/plugin/datatables/swf/copy_csv_xls_pdf.swf"
                              },
                              "sDom": "<'dt-toolbar'<'col-xs-8'f><'col-xs-2'T><'col-xs-2'l>r>"+
                                      "t"+
                                      "<'dt-toolbar-footer'<'col-xs-6'i><'col-xs-6'p>>",
                          });
                                       
                          // Apply the filter
                          $("#" + entryTblID + " thead th input[type=text]").on( 'keyup change', function () { 
                              oNewReport
                                  .column( $(this).parent().index()+':visible' )
                                  .search( this.value )
                                  .draw();        
                          });
                        
                          $("#" + entryTblID + " thead th input[type=text]").on( 'keyup change', function () { 
                              oNewReport
                                  .column( $(this).parent().index()+':visible' )
                                  .search( this.value )
                                  .draw();          
                          } );
                        }
                        break;
                      }
                    }
                    
                    tab.find('a').tab('show');
                    registerCloseEvent();
                }
            }); 
        });
    };


    var tabID = 1;
    
    loadScript("js/plugin/datatables/jquery.dataTables.min.js", function(){
        loadScript("js/plugin/datatables/dataTables.colVis.min.js", function(){
            loadScript("js/plugin/datatables/dataTables.tableTools.min.js", function(){
                loadScript("js/plugin/datatables/dataTables.bootstrap.min.js", pagefunction);
            });
        });
    });
    
    addTab = function(id, label, content ){
        var nav     = $('#widget-tab-navtab');  // ID of your nav-tabs element
        var tabs    = $('#widget-tab-content'); // ID of your tab-content element

        var new_tab = $('<div>').addClass( 'tab-pane fade in').attr('id', id).append( content );
        //var new_li  = $('<li>').append( $('<a>').attr('href', "#" + id).attr('data-toggle', 'tab').append( label ) );
        var new_li  = $('<li>').append( $('<a>').attr('href', "#" + id).attr('data-toggle', 'tab').append($('<button>').addClass('close closeTab').attr('type', 'button').append('×')).append(label ) );
        //$('.nav-tabs').append('<li><a href="#' + tabId + '"><button class="close closeTab" type="button" >×</button>Compose</a></li>');

        tabs.append( new_tab );
        nav.append( new_li );

        return new_li;
    }
    
    DirectoryListing_Template = "" +
      "<table id='FileBrowser' class='table table-striped table-bordered table-hover' width='100%'>" +
      "  <thead>" +
      "    <tr>" +
      "      <th style='width: 50px'></th>" +
      "      <th style='width: 50px'></th>" +
      "      <th style='width: 200px'></th>" +
      "      <th class='hasinput' >" +
      "        <input style='form-control' type='text' placeholder='Filter Name'>" +
      "      </th>" +
      "      <th></th>" +
      "    </tr>" +
      "    <tr>" +
      "      <th>Type</th>" +
      "      <th>Size</th>" +
      "      <th>Created</th>" +
      "      <th>Name</th>" +
      "      <th>FullPath</th>" +
      "    </tr>" +
      "  <tbody>" +
      "    {{#each .}}" +
      "      <tr>" +
      "        <td>{{#ifCond isdir '==' true }}DIR{{else}}FILE{{/ifCond}}</td>" +
      "        <td>{{size}}</td>" +
      "        <td>{{mtime}}</td>" +
      "        <td>{{name}}</td>" +
      "        <td>{{name}}</td>" +
      "      </tr>" +
      "    {{/each}}" +
      "  </tbody>" +
      "</table>";     
      
    DirectoryListing = Handlebars.compile(DirectoryListing_Template);
    
    LogReport_Template = "" +
    "<div class='table-responsive'>" +
    "  <table class='table table-condensed'>" +
    "    <tbody>" +
    "      <tr>" +
    "        <th width='150px'>SubType</th>" +
    "        <td>{{Header.SubType}}</td>" +
    "      </tr>" +
    "      <tr>" +
    "        <th>Length</th>" +
    "        <td>{{Header.Length}}</td>" +
    "      </tr>" +
    "      <tr>" +
    "        <th>SpacecraftID</th>" +
    "        <td>{{Header.SpacecraftID}}</td>" +
    "      </tr>" +
    "      <tr>" +
    "        <th>ProcessorID</th>" +
    "        <td>{{Header.ProcessorID}}</td>" +
    "      </tr>" +
    "      <tr>" +
    "        <th>ApplicationID</th>" +
    "        <td>{{Header.ApplicationID}}</td>" +
    "      </tr>" +
    "      <tr>" +
    "        <th>Timestamp</th>" +
    "        <td>{{time_cfe_to_js Header.TimeSeconds Header.TimeSubseconds}}</td>" +
    "      </tr>" +
    "      <tr>" +
    "        <th>Description</th>" +
    "        <td>{{Header.Description}}</td>" +
    "      </tr>" +
    "      <tr>" +
    "        <th>Detail</th>" +
    "        <td>" +
    "          {{report_detail .}}" +
    "        </td>" +
    "      </tr>" +
    "    </tbody>" +
    "  </table>" 
      
    LogReport = Handlebars.compile(LogReport_Template);
    
    LogEntryTabs_Template = "" +
    "<ul class='nav nav-tabs tabs-left' id='demo-pill-nav'>" +
    "  {{#each LogEntries}}" +  
    "    <li>" +
    "      <a href='\#{{TabID}}' data-toggle='tab'><span class='badge {{#ifCond LogEntryType '==' 0 }}bg-color-gray{{else}}bg-color-green{{/ifCond}} txt-color-white'>{{LogEntryType}}</span> {{@index}}</a>" +
    "    </li>" +
    "  {{/each}}" +
    "</ul>" 

    LogEntryTabs_Rpt = Handlebars.compile(LogEntryTabs_Template);

    
    CFE_ES_ERLOG_Template = "" +
    "<div class='tabs-left'>" +
    "  {{report_detail_nav_tabs .}}" +
    "  <div class='tab-content'>" +
    "    {{#each LogEntries}}" +
    "      <div class='tab-pane {{#if @first}} active{{/if}}' id='{{TabID}}'>" +
    "        <div class='table-responsive'>" +
    "          <table class='table table-condensed'>" +
    "            <tbody>" +
    "              <tr>" +
    "                <th width='175px'>Entry Type</th>" +
    "                <td>{{LogEntryType}}</td>" +
    "              </tr>" +
    "              <tr>" +
    "                <th>Reset Type</th>" +
    "                <td>{{ResetType}}</td>" +
    "              </tr>" +
    "              <tr>" +
    "                <th>Reset SubType</th>" +
    "                <td>{{ResetSubType}}</td>" +
    "              </tr>" +
    "              <tr>" +
    "                <th>Boot Source</th>" +
    "                <td>{{BootSource}}</td>" +
    "              </tr>" +
    "              <tr>" +
    "                <th>Proc Reset Cnt</th>" +
    "                <td>{{ProcessorResetCount}}</td>" +
    "              </tr>" +
    "              <tr>" +
    "                <th>Max Proc Reset Cnt</th>" +
    "                <td>{{MaxProcessorResetCount}}</td>" +
    "              </tr>" +
    "              <tr>" +
    "                <th>Debug Flag</th>" +
    "                <td>{{DebugFlag}}</td>" +
    "              </tr>" +
    "              <tr>" +
    "                <th>WD Write</th>" +
    "                <td>{{WatchdogWriteFlag}}</td>" +
    "              </tr>" +
    "              <tr>" +
    "                <th>Printf Enabled</th>" +
    "                <td>{{PrintfEnabledFlag}}</td>" +
    "              </tr>" +
    "              <tr>" +
    "                <th>Last App ID</th>" +
    "                <td>{{LastAppId}}</td>" +
    "              </tr>" +
    "              <tr>" +
    "                <th>Timestamp</th>" +
    "                <td>{{time_cfe_to_js Seconds Subseconds}}</td>" +
    "              </tr>" +
    "              <tr>" +
    "                <th>Description</th>" +
    "                <td>{{Description}}</td>" +
    "              </tr>" +
    "              <tr>" +
    "                <th>Context Present</th>" +
    "                <td>{{ContextIsPresent}}</td>" +
    "              </tr>" +
    "              <tr>" +
    "                <th>AppID</th>" +
    "                <td>{{AppID}}</td>" +
    "              </tr>" +
    "              <tr>" +
    "                <th>Context</th>" +
    "                <td>{{Context}}</td>" +
    "              </tr>" +
    "            </tbody>" +
    "          </table>" +
    "        </div>" +
    "      </div>" +
    "    {{/each}}" +
    "  </div>" +    
    "</div>";

    CFE_ES_ERLOG_Rpt = Handlebars.compile(CFE_ES_ERLOG_Template);
   
   
    CFE_ES_SYSLOG_Template = "" +
    "{{OutputErSysLog Log}}"

    CFE_ES_SYSLOG_Rpt = Handlebars.compile(CFE_ES_SYSLOG_Template);
    
    Handlebars.registerHelper('OutputErSysLog', function(log) {
      return new Handlebars.SafeString( log.replace(/\r\n?|\n/g, '<br />'));
    });
    
    
    function registerCloseEvent() {
      $(".closeTab").click(function () {
        //there are multiple elements which has .closeTab icon so close the tab whose close icon is clicked
        var tabContentId = $(this).parent().attr("href");
        $(this).parent().parent().remove(); //remove li of tab
        $(tabContentId).remove(); //remove respective tab content
        $('#widget-tab-navtab a:last').tab('show'); // Select first tab
      });
    };
    
    var CFE_ES_ERLOG_Rpt;
    
    Handlebars.registerHelper('time_cfe_to_js', function(sec, subsec) {
      return new Handlebars.SafeString(CfeTimeToJsTime(sec, subsec));
    });
    
    Handlebars.registerHelper('report_detail', function(context) {
      switch(context.Header.SubType)
      {
        case 'CFE_ES_ERLOG':
          return new Handlebars.SafeString(CFE_ES_ERLOG_Rpt(context));
          break;
          
        case 'CFE_ES_SYSLOG':
          return new Handlebars.SafeString(CFE_ES_SYSLOG_Rpt(context));
          break;
          
        case 'CFE_ES_QUERYALL':
          return new Handlebars.SafeString(CFE_ES_QUERYALL_Rpt(context));
          break;
          
        case 'CFE_SB_PIPEDATA':
          return new Handlebars.SafeString(CFE_SB_PIPEDATA_Rpt(context));
          break;
          
        case 'CFE_SB_ROUTEDATA':
          return new Handlebars.SafeString(CFE_SB_ROUTEDATA_Rpt(context));
          break;
          
        case 'CFE_SB_MAPDATA':
          return new Handlebars.SafeString(CFE_SB_MAPDATA_Rpt(context));
          break;
          
        case 'CFE_ES_CDS_REG':
          return new Handlebars.SafeString(CFE_ES_CDS_REG_Rpt(context));
          break;
          
        case 'CFE_ES_QUERYALLTASKS':
          return new Handlebars.SafeString(CFE_ES_TASKINFO_Rpt(context));
          break;
          
        case 'CFE_EVS_APPDATA':
          return new Handlebars.SafeString(CFE_EVS_APPDATA_Rpt(context));
          break;
          
        case 'CFE_EVS_EVENTLOG':
          return new Handlebars.SafeString(CFE_EVS_EVENTLOG_Rpt(context));
          break;
          
        case 'CFE_TBL_REG':
          return new Handlebars.SafeString(CFE_TBL_REG_Rpt(context));
          break;
          
        case 'CFE_ES_PERFDATA':
          return new Handlebars.SafeString(CFE_ES_PERFDATA_Rpt(context));
          break;
      }
    });
    
    Handlebars.registerHelper('report_detail_nav_tabs', function(context) {
      return new Handlebars.SafeString(LogEntryTabs_Rpt(context));
    });
    
    sage.callFunc('CfeLP_GetDir', {DirPath:'.'}, function(err, resp) {
      $('#FileBrowserContainer').append(DirectoryListing(resp));
    });
    
    
    
    AppInfoLogEntryTabs_Template = "" +
    "<ul class='nav nav-tabs tabs-left' id='demo-pill-nav'>" +
    "  {{#each AppInfo}}" +  
    "    <li>" +
    "      <a href='\#{{TabID}}' data-toggle='tab'><span class='badge {{#ifCond Type '==' 0 }}bg-color-gray{{else}}bg-color-green{{/ifCond}} txt-color-white'>{{@index}}</span> {{Name}}</a>" +
    "    </li>" +
    "  {{/each}}" +
    "</ul>" 

    AppInfoEntryTabs_Rpt = Handlebars.compile(AppInfoLogEntryTabs_Template);

    CFE_ES_QUERYALL_Template = "" +
    "<div class='tabs-left'>" +
    "  {{queryall_detail_nav_tabs .}}" +
    "  <div class='tab-content'>" +
    "    {{#each AppInfo}}" +
    "      <div class='tab-pane {{#if @first}} active{{/if}}' id='{{TabID}}'>" +
    "        <div class='table-responsive'>" +
    "          <table class='table table-condensed'>" +
    "            <tbody>" +
    "              <tr>" +
    "                <th width='175px'>App ID</th>" +
    "                <td>{{AppId}}</td>" +
    "              </tr>" +
    "              <tr>" +
    "                <th>Type</th>" +
    "                <td>{{Type}}</td>" +
    "              </tr>" +
    "              <tr>" +
    "                <th>Name</th>" +
    "                <td>{{Name}}</td>" +
    "              </tr>" +
    "              <tr>" +
    "                <th>Entry Point</th>" +
    "                <td>{{EntryPoint}}</td>" +
    "              </tr>" +
    "              <tr>" +
    "                <th>File Name</th>" +
    "                <td>{{FileName}}</td>" +
    "              </tr>" +
    "              <tr>" +
    "                <th>Stack Size</th>" +
    "                <td>{{StackSize}}</td>" +
    "              </tr>" +
    "              <tr>" +
    "                <th>Module ID</th>" +
    "                <td>{{ModuleId}}</td>" +
    "              </tr>" +
    "              <tr>" +
    "                <th>Addresses Are Valid</th>" +
    "                <td>{{AddressesAreValid}}</td>" +
    "              </tr>" +
    "              <tr>" +
    "                <th>Code Address</th>" +
    "                <td>{{CodeAddress}}</td>" +
    "              </tr>" +
    "              <tr>" +
    "                <th>Code Size</th>" +
    "                <td>{{CodeSize}}</td>" +
    "              </tr>" +
    "              <tr>" +
    "                <th>Data Address</th>" +
    "                <td>{{DataAddress}}</td>" +
    "              </tr>" +
    "              <tr>" +
    "                <th>Data Size</th>" +
    "                <td>{{DataSize}}</td>" +
    "              </tr>" +
    "              <tr>" +
    "                <th>BSS Address</th>" +
    "                <td>{{BSSAddress}}</td>" +
    "              </tr>" +
    "              <tr>" +
    "                <th>BSS Size</th>" +
    "                <td>{{BSSSize}}</td>" +
    "              </tr>" +
    "              <tr>" +
    "                <th>Start Address</th>" +
    "                <td>{{StartAddress}}</td>" +
    "              </tr>" +
    "              <tr>" +
    "                <th>Exception Action</th>" +
    "                <td>{{ExceptionAction}}</td>" +
    "              </tr>" +
    "              <tr>" +
    "                <th>Priority</th>" +
    "                <td>{{Priority}}</td>" +
    "              </tr>" +
    "              <tr>" +
    "                <th>Main Task ID</th>" +
    "                <td>{{MainTaskId}}</td>" +
    "              </tr>" +
    "              <tr>" +
    "                <th>Execution Counter</th>" +
    "                <td>{{ExecutionCounter}}</td>" +
    "              </tr>" +
    "              <tr>" +
    "                <th>Main Task Name</th>" +
    "                <td>{{MainTaskName}}</td>" +
    "              </tr>" +
    "              <tr>" +
    "                <th>Num Of Child Tasks</th>" +
    "                <td>{{NumOfChildTasks}}</td>" +
    "              </tr>" +
    "            </tbody>" +
    "          </table>" +
    "        </div>" +
    "      </div>" +
    "    {{/each}}" +
    "  </div>" +    
    "</div>";

    CFE_ES_QUERYALL_Rpt = Handlebars.compile(CFE_ES_QUERYALL_Template);
  
    Handlebars.registerHelper('queryall_detail_nav_tabs', function(context) {
      return new Handlebars.SafeString(AppInfoEntryTabs_Rpt(context));
    });
    

    
    /***************************************************/
    /*                 CFE_SB_PIPEDATA                 */
    /***************************************************/
    PipeDataLogEntryTabs_Template = "" +
    "<ul class='nav nav-tabs tabs-left' id='demo-pill-nav'>" +
    "  {{#each PipeData}}" +  
    "    <li>" +
    "      <a href='\#{{TabID}}' data-toggle='tab'><span class='badge bg-color-green txt-color-white'>{{@index}}</span> {{Name}}</a>" +
    "    </li>" +
    "  {{/each}}" +
    "</ul>" 

    PipeDataEntryTabs_Rpt = Handlebars.compile(PipeDataLogEntryTabs_Template);

    CFE_SB_PIPEDATA_Template = "" +
    "<div class='tabs-left'>" +
    "  {{pipedata_detail_nav_tabs .}}" +
    "  <div class='tab-content'>" +
    "    {{#each PipeData}}" +
    "      <div class='tab-pane {{#if @first}} active{{/if}}' id='{{TabID}}'>" +
    "        <div class='table-responsive'>" +
    "          <table class='table table-condensed'>" +
    "            <tbody>" +
    "              <tr>" +
    "                <th width='175px'>In Use</th>" +
    "                <td>{{InUse}}</td>" +
    "              </tr>" +
    "              <tr>" +
    "                <th>Pipe ID</th>" +
    "                <td>{{PipeId}}</td>" +
    "              </tr>" +
    "              <tr>" +
    "                <th>App Name</th>" +
    "                <td>{{AppName}}</td>" +
    "              </tr>" +
    "              <tr>" +
    "                <th>App ID</th>" +
    "                <td>{{AppId}}</td>" +
    "              </tr>" +
    "              <tr>" +
    "                <th>Sys Queue ID</th>" +
    "                <td>{{SysQueueId}}</td>" +
    "              </tr>" +
    "              <tr>" +
    "                <th>Last Sender</th>" +
    "                <td>{{LastSender}}</td>" +
    "              </tr>" +
    "              <tr>" +
    "                <th>Queue Depth</th>" +
    "                <td>{{QueueDepth}}</td>" +
    "              </tr>" +
    "              <tr>" +
    "                <th>Send Errors</th>" +
    "                <td>{{SendErrors}}</td>" +
    "              </tr>" +
    "              <tr>" +
    "                <th>Current Buffer Address</th>" +
    "                <td>{{CurrentBuffAddr}}</td>" +
    "              </tr>" +
    "              <tr>" +
    "                <th>Trash Buffer Address</th>" +
    "                <td>{{ToTrashBuffAddr}}</td>" +
    "              </tr>" +
    "            </tbody>" +
    "          </table>" +
    "        </div>" +
    "      </div>" +
    "    {{/each}}" +
    "  </div>" +    
    "</div>";

    CFE_SB_PIPEDATA_Rpt = Handlebars.compile(CFE_SB_PIPEDATA_Template);
  
    Handlebars.registerHelper('pipedata_detail_nav_tabs', function(context) {
      return new Handlebars.SafeString(PipeDataEntryTabs_Rpt(context));
    });
    

    
    /***************************************************/
    /*                CFE_SB_ROUTEDATA                 */
    /***************************************************/
    RouteDataLogEntryTabs_Template = "" +
    "<ul class='nav nav-tabs tabs-left' id='demo-pill-nav'>" +
    "  {{#each RouteData}}" +  
    "    <li>" +
    "      <a href='\#{{TabID}}' data-toggle='tab'><span class='badge bg-color-green txt-color-white'>{{@index}}</span> {{Name}}</a>" +
    "    </li>" +
    "  {{/each}}" +
    "</ul>" 

    RouteDataEntryTabs_Rpt = Handlebars.compile(RouteDataLogEntryTabs_Template);

    CFE_SB_ROUTEDATA_Template = "" +
    "<div class='tabs-left'>" +
    "  {{routedata_detail_nav_tabs .}}" +
    "  <div class='tab-content'>" +
    "    {{#each RouteData}}" +
    "      <div class='tab-pane {{#if @first}} active{{/if}}' id='{{TabID}}'>" +
    "        <div class='table-responsive'>" +
    "          <table class='table table-condensed'>" +
    "            <tbody>" +
    "              <tr>" +
    "                <th width='175px'>In Use</th>" +
    "                <td>{{MsgId}}</td>" +
    "              </tr>" +
    "              <tr>" +
    "                <th>Pipe ID</th>" +
    "                <td>{{PipeId}}</td>" +
    "              </tr>" +
    "              <tr>" +
    "                <th>State</th>" +
    "                <td>{{State}}</td>" +
    "              </tr>" +
    "              <tr>" +
    "                <th>Msg Count</th>" +
    "                <td>{{MsgCnt}}</td>" +
    "              </tr>" +
    "              <tr>" +
    "                <th>App Name</th>" +
    "                <td>{{AppName}}</td>" +
    "              </tr>" +
    "              <tr>" +
    "                <th>Pipe Name</th>" +
    "                <td>{{PipeName}}</td>" +
    "              </tr>" +
    "            </tbody>" +
    "          </table>" +
    "        </div>" +
    "      </div>" +
    "    {{/each}}" +
    "  </div>" +    
    "</div>";

    CFE_SB_ROUTEDATA_Rpt = Handlebars.compile(CFE_SB_ROUTEDATA_Template);
  
    Handlebars.registerHelper('routedata_detail_nav_tabs', function(context) {
      return new Handlebars.SafeString(RouteDataEntryTabs_Rpt(context));
    });
        



    /***************************************************/
    /*                CFE_SB_MAPDATA                 */
    /***************************************************/
    MapDataLogEntryTabs_Template = "" +
    "<ul class='nav nav-tabs tabs-left' id='demo-pill-nav'>" +
    "  {{#each MapData}}" +  
    "    <li>" +
    "      <a href='\#{{TabID}}' data-toggle='tab'><span class='badge bg-color-green txt-color-white'>{{@index}}</span> {{MsgId}}</a>" +
    "    </li>" +
    "  {{/each}}" +
    "</ul>" 

    MapDataEntryTabs_Rpt = Handlebars.compile(MapDataLogEntryTabs_Template);

    CFE_SB_MAPDATA_Template = "" +
      "<table id='{{TableID}}' class='table table-striped table-bordered table-hover'>" +
      "  <thead>" +
      "    <tr>" +
      "      <th style='width: 100px' class='hasinput' >" +
      "        <input style='form-control' type='text' placeholder='Filter MsgID'>" +
      "      </th>" +
      "      <th style='width: 100px' class='hasinput' >" +
      "        <input style='form-control' type='text' placeholder='Filter Route Index'>" +
      "      </th>" +
      "    </tr>" +
      "    <tr>" +
      "      <th>Message ID</th>" +
      "      <th>Route Index</th>" +
      "    </tr>" +
      "  <tbody>" +
      "    {{#each MapData}}" +
      "      <tr>" +
      "        <td>{{MsgId}}</td>" +
      "        <td>{{RouteIndex}}</td>" +
      "      </tr>" +
      "    {{/each}}" +
      "  </tbody>" +
      "</table>";     

    CFE_SB_MAPDATA_Rpt = Handlebars.compile(CFE_SB_MAPDATA_Template);
  
        

    /***************************************************/
    /*                 CFE_ES_CDS_REG                  */
    /***************************************************/
    CdsRegEntryTabs_Template = "" +
    "<ul class='nav nav-tabs tabs-left' id='demo-pill-nav'>" +
    "  {{#each MapData}}" +  
    "    <li>" +
    "      <a href='\#{{TabID}}' data-toggle='tab'><span class='badge bg-color-green txt-color-white'>{{@index}}</span> {{Name}}</a>" +
    "    </li>" +
    "  {{/each}}" +
    "</ul>" 

    CdsRegEntryTabs_Rpt = Handlebars.compile(CdsRegEntryTabs_Template);

    CFE_ES_CDS_REG_Template = "" +
      "<table id='{{TableID}}' class='table table-striped table-bordered table-hover'>" +
      "  <thead>" +
      "    <tr>" +
      "      <th style='width: 100px' class='hasinput' >" +
      "        <input style='form-control' type='text' placeholder='Filter MsgID'>" +
      "      </th>" +
      "      <th style='width: 100px' class='hasinput' >" +
      "        <input style='form-control' type='text' placeholder='Filter Route Index'>" +
      "      </th>" +
      "    </tr>" +
      "    <tr>" +
      "      <th>Name</th>" +
      "      <th>Size</th>" +
      "      <th>Handle</th>" +
      "      <th>Is Table</th>" +
      "    </tr>" +
      "  <tbody>" +
      "    {{#each CdsRegData}}" +
      "      <tr>" +
      "        <td>{{Name}}</td>" +
      "        <td>{{Size}}</td>" +
      "        <td>{{Handle}}</td>" +
      "        <td>{{Table}}</td>" +
      "      </tr>" +
      "    {{/each}}" +
      "  </tbody>" +
      "</table>";     

    CFE_ES_CDS_REG_Rpt = Handlebars.compile(CFE_ES_CDS_REG_Template);
  
        

    /***************************************************/
    /*                CFE_ES_TASK_INFO                 */
    /***************************************************/
    CFE_ES_TASKINFO_Template = "" +
      "<table id='{{TableID}}' class='table table-striped table-bordered table-hover'>" +
      "  <thead>" +
      "    <tr>" +
      "      <th style='width: 100px' class='hasinput' >" +
      "        <input style='form-control' type='text' placeholder='Filter TaskName'>" +
      "      </th>" +
      "      <th style='width: 100px' class='hasinput' >" +
      "        <input style='form-control' type='text' placeholder='Filter App Name'>" +
      "      </th>" +
      "      <th style='width: 100px' class='hasinput' >" +
      "        <input style='form-control' type='text' placeholder='Filter App ID'>" +
      "      </th>" +
      "      <th></th>" +
      "    </tr>" +
      "    <tr>" +
      "      <th>Task Name</th>" +
      "      <th>App Name</th>" +
      "      <th>App ID</th>" +
      "      <th>Exec Counter</th>" +
      "    </tr>" +
      "  <tbody>" +
      "    {{#each TaskInfoData}}" +
      "      <tr>" +
      "        <td>{{TaskName}}</td>" +
      "        <td>{{AppName}}</td>" +
      "        <td>{{AppId}}</td>" +
      "        <td>{{ExecutionCounter}}</td>" +
      "      </tr>" +
      "    {{/each}}" +
      "  </tbody>" +
      "</table>";     

    CFE_ES_TASKINFO_Rpt = Handlebars.compile(CFE_ES_TASKINFO_Template);
    
    
    
    /***************************************************/
    /*                CFE_EVS_APPDATA_INFO                 */
    /***************************************************/
    CFE_EVS_APPDATA_Template = "" +
      "<div class='panel-group smart-accordion-default' id='{{AccordionID}}'>" +
      "  {{#each AppData}}" +
      "  <div class='panel panel-default'>" +
      "    <div class='panel-heading'>" +
      "      <h4 class='panel-title'><a data-toggle='collapse' data-parent='\#{{AccordionID}}' href='\#{{CollapseID}}' class='collapsed'> <i class='fa fa-lg fa-angle-down pull-right'></i> <i class='fa fa-lg fa-angle-up pull-right'></i> {{AppName}} </a></h4>" +
      "    </div>" +
      "    <div id='{{CollapseID}}' class='panel-collapse collapse'>" +
      "      <div class='panel-body'>" +
      "        <div class='table-responsive'>" +
      "          <table class='table table-condensed'>" +
      "            <tbody>" +
      "              <tr>" +
      "                <th width='150px'>Active</th>" +
      "                <td>{{ActiveFlag}}</td>" +
      "              </tr>" +
      "              <tr>" +
      "                <th width='150px'>Critical Enabled</th>" +
      "                <td>{{CriticalActive}}</td>" +
      "              </tr>" +
      "              <tr>" +
      "                <th width='150px'>Error Enabled</th>" +
      "                <td>{{ErrorActive}}</td>" +
      "              </tr>" +
      "              <tr>" +
      "                <th width='150px'>Info Enabled</th>" +
      "                <td>{{InfoActive}}</td>" +
      "              </tr>" +
      "              <tr>" +
      "                <th width='150px'>Debug Enabled</th>" +
      "                <td>{{DebugActive}}</td>" +
      "              </tr>" +
      "              <tr>" +
      "                <th width='150px'>Event Count</th>" +
      "                <td>{{EventCount}}</td>" +
      "              </tr>" +
      "              <tr>" +
      "                <th width='150px'>Filters</th>" +
      "                <td>" +
      "                  <table id='{{TableID}}' class='table table-striped table-bordered table-hover'>" +
      "                    <thead>" +
      "                      <tr>" +
      "                        <th style='width: 100px' class='hasinput' >" +
      "                          <input style='form-control' type='text' placeholder='Filter Event ID'>" +
      "                        </th>" +
      "                        <th style='width: 100px' class='hasinput' >" +
      "                          <input style='form-control' type='text' placeholder='Filter Mask'>" +
      "                        </th>" +
      "                        <th></th>" +
      "                      </tr>" +
      "                      <tr>" +
      "                        <th>Event ID</th>" +
      "                        <th>Mask</th>" +
      "                        <th>Count</th" +
      "                      </tr>" +
      "                    </thead>" +
      "                    <tbody>" +
      "                      {{#each Filters}}" +
      "                        <tr>" +
      "                          <td>{{EventID}}</td>" +
      "                          <td>{{Mask}}</td>" +
      "                          <td>{{Count}}</td>" +
      "                        </tr>" +
      "                      {{/each}}" +
      "                    </tbody>" +
      "                  </table>" +
      "                </td>" +
      "              </tr>" +
      "            </tbody>" +
      "          </table>" +
      "        </div>" +
      "      </div>" +
      "    </div>" +
      "  </div>" +
      "  {{/each}}" +
      "</div>";
    
      
    CFE_EVS_APPDATA_Rpt = Handlebars.compile(CFE_EVS_APPDATA_Template);
    
    
    
    /***************************************************/
    /*                CFE_EVS_EVENTLOG                 */
    /***************************************************/
    CFE_EVS_EVENTLOG_Template = "" +
      "<div class='panel-group smart-accordion-default' id='{{AccordionID}}'>" +
      "  {{#each EventLog}}" +
      "  <div class='panel panel-default'>" +
      "    <div class='panel-heading'>" +
      "      <h4 class='panel-title'><a data-toggle='collapse' data-parent='\#{{AccordionID}}' href='\#{{CollapseID}}' class='collapsed'> <i class='fa fa-lg fa-angle-down pull-right'></i> <i class='fa fa-lg fa-angle-up pull-right'></i> {{AppName}}:{{EventType}}:{{EventID}}:{{Message}} </a></h4>" +
      "    </div>" +
      "    <div id='{{CollapseID}}' class='panel-collapse collapse'>" +
      "      <div class='panel-body'>" +
      "        <div class='table-responsive'>" +
      "          <table class='table table-condensed'>" +
      "            <tbody>" +
      "              <tr>" +
      "                <th width='150px'>Stream ID</th>" +
      "                <td>{{StreamId}}</td>" +
      "              </tr>" +
      "              <tr>" +
      "                <th width='150px'>Sequence</th>" +
      "                <td>{{Sequence}}</td>" +
      "              </tr>" +
      "              <tr>" +
      "                <th width='150px'>Length</th>" +
      "                <td>{{Length}}</td>" +
      "              </tr>" +
      "              <tr>" +
      "                <th width='150px'>Seconds</th>" +
      "                <td>{{Seconds}}</td>" +
      "              </tr>" +
      "              <tr>" +
      "                <th width='150px'>Subseconds</th>" +
      "                <td>{{Subseconds}}</td>" +
      "              </tr>" +
      "              <tr>" +
      "                <th width='150px'>App Name</th>" +
      "                <td>{{AppName}}</td>" +
      "              </tr>" +
      "              <tr>" +
      "                <th width='150px'>Event ID</th>" +
      "                <td>{{EventID}}</td>" +
      "              </tr>" +
      "              <tr>" +
      "                <th width='150px'>Event Type</th>" +
      "                <td>{{EventType}}</td>" +
      "              </tr>" +
      "              <tr>" +
      "                <th width='150px'>Spacecraft ID</th>" +
      "                <td>{{SpacecraftID}}</td>" +
      "              </tr>" +
      "              <tr>" +
      "                <th width='150px'>Processor ID</th>" +
      "                <td>{{ProcessorID}}</td>" +
      "              </tr>" +
      "              <tr>" +
      "                <th width='150px'>Message</th>" +
      "                <td>{{Message}}</td>" +
      "              </tr>" +
      "            </tbody>" +
      "          </table>" +
      "        </div>" +
      "      </div>" +
      "    </div>" +
      "  </div>" +
      "  {{/each}}" +
      "</div>";
    
      
    CFE_EVS_EVENTLOG_Rpt = Handlebars.compile(CFE_EVS_EVENTLOG_Template);
    
    
    
    /***************************************************/
    /*                   CFE_TBL_REG                   */
    /***************************************************/
    CFE_TBL_REG_Template = "" +
      "<div class='panel-group smart-accordion-default' id='{{AccordionID}}'>" +
      "  {{#each TblReg}}" +
      "  <div class='panel panel-default'>" +
      "    <div class='panel-heading'>" +
      "      <h4 class='panel-title'><a data-toggle='collapse' data-parent='\#{{AccordionID}}' href='\#{{CollapseID}}' class='collapsed'> <i class='fa fa-lg fa-angle-down pull-right'></i> <i class='fa fa-lg fa-angle-up pull-right'></i> {{Name}} </a></h4>" +
      "    </div>" +
      "    <div id='{{CollapseID}}' class='panel-collapse collapse'>" +
      "      <div class='panel-body'>" +
      "        <div class='table-responsive'>" +
      "          <table class='table table-condensed'>" +
      "            <tbody>" +
      "              <tr>" +
      "                <th width='150px'>Size</th>" +
      "                <td>{{Size}}</td>" +
      "              </tr>" +
      "              <tr>" +
      "                <th width='150px'>Seconds</th>" +
      "                <td>{{Seconds}}</td>" +
      "              </tr>" +
      "              <tr>" +
      "                <th width='150px'>Subseconds</th>" +
      "                <td>{{Subseconds}}</td>" +
      "              </tr>" +
      "              <tr>" +
      "                <th width='150px'>Number of Users</th>" +
      "                <td>{{NumUsers}}</td>" +
      "              </tr>" +
      "              <tr>" +
      "                <th width='150px'>Load In Progress</th>" +
      "                <td>{{LoadInProgress}}</td>" +
      "              </tr>" +
      "              <tr>" +
      "                <th width='150px'>File Create Time Secs</th>" +
      "                <td>{{FileCreateTimeSecs}}</td>" +
      "              </tr>" +
      "              <tr>" +
      "                <th width='150px'>FileCreateTimeSubSecs</th>" +
      "                <td>{{FileCreateTimeSecs}}</td>" +
      "              </tr>" +
      "              <tr>" +
      "                <th width='150px'>Crce</th>" +
      "                <td>{{Crc}}</td>" +
      "              </tr>" +
      "              <tr>" +
      "                <th width='150px'>ValidationFunc</th>" +
      "                <td>{{ValidationFunc}}</td>" +
      "              </tr>" +
      "              <tr>" +
      "                <th width='150px'>Table Loaded Once</th>" +
      "                <td>{{TableLoadedOnce}}</td>" +
      "              </tr>" +
      "              <tr>" +
      "                <th width='150px'>Load Pending</th>" +
      "                <td>{{LoadPending}}</td>" +
      "              </tr>" +
      "              <tr>" +
      "                <th width='150px'>Dump Only</th>" +
      "                <td>{{DumpOnly}}</td>" +
      "              </tr>" +
      "              <tr>" +
      "                <th width='150px'>Double Buffered</th>" +
      "                <td>{{DblBuffered}}</td>" +
      "              </tr>" +
      "              <tr>" +
      "                <th width='150px'>Name</th>" +
      "                <td>{{Name}}</td>" +
      "              </tr>" +
      "              <tr>" +
      "                <th width='150px'>Last File Loaded</th>" +
      "                <td>{{LastFileLoaded}}</td>" +
      "              </tr>" +
      "              <tr>" +
      "                <th width='150px'>Owner App Name</th>" +
      "                <td>{{OwnerAppName}}</td>" +
      "              </tr>" +
      "              <tr>" +
      "                <th width='150px'>Critical Table</th>" +
      "                <td>{{CriticalTable}}</td>" +
      "              </tr>" +
      "            </tbody>" +
      "          </table>" +
      "        </div>" +
      "      </div>" +
      "    </div>" +
      "  </div>" +
      "  {{/each}}" +
      "</div>";
    
    CFE_TBL_REG_Rpt = Handlebars.compile(CFE_TBL_REG_Template);
    
    
    
    /***************************************************/
    /*                  CFE_ES_PERFDATA                */
    /***************************************************/
    CFE_ES_PERFDATA_Template = "" +
      "<div class='table-responsive'>" +
      "  <table class='table table-condensed'>" +
      "    <tbody>" +
      "      <tr>" +
      "        <th width='175px'>Version</th>" +
      "        <td>{{MetaData.Version}}</td>" +
      "      </tr>" +
      "      <tr>" +
      "        <th>Endian</th>" +
      "        <td>{{MetaData.Endian}}</td>" +
      "      </tr>" +
      "      <tr>" +
      "        <th>Timer Ticks Per Second</th>" +
      "        <td>{{MetaData.TimerTicksPerSecond}}</td>" +
      "      </tr>" +
      "      <tr>" +
      "        <th>Timer Low 32 Rollover</th>" +
      "        <td>{{MetaData.TimerLow32Rollover}}</td>" +
      "      </tr>" +
      "      <tr>" +
      "        <th>State</th>" +
      "        <td>{{MetaData.State}}</td>" +
      "      </tr>" +
      "      <tr>" +
      "        <th>Mode</th>" +
      "        <td>{{MetaData.Mode}}</td>" +
      "      </tr>" +
      "      <tr>" +
      "        <th>Trigger Count</th>" +
      "        <td>{{MetaData.TriggerCount}}</td>" +
      "      </tr>" +
      "      <tr>" +
      "        <th>Data Start</th>" +
      "        <td>{{MetaData.DataStart}}</td>" +
      "      </tr>" +
      "      <tr>" +
      "        <th>Data End</th>" +
      "        <td>{{MetaData.DataEnd}}</td>" +
      "      </tr>" +
      "      <tr>" +
      "        <th>Data Count</th>" +
      "        <td>{{MetaData.DataCount}}</td>" +
      "      </tr>" +
      "      <tr>" +
      "        <th>Invalid Marker Reported</th>" +
      "        <td>{{MetaData.InvalidMarkerReported}}</td>" +
      "      </tr>" +
      "      <tr>" +
      "        <th>Filter Trigger Mask Size</th>" +
      "        <td>{{MetaData.FilterTriggerMaskSize}}</td>" +
      "      </tr>" +
      "      <tr>" +
      "        <th>Filter Mask</th>" +
      "        <td></td>" +
      "      </tr>" +
      "      <tr>" +
      "        <th>Trigger Mask</th>" +
      "        <td></td>" +
      "      </tr>" +
      "      <tr>" +
      "        <th>Chart</th>" +
      "        <td>" +
      "        </td>" +
      "      </tr>" +
      "    </tbody>" +
      "  </table>" +
      "  <div id='{{TableID}}' style='height:500px; width: auto;'></div>" +
      "</div>";
    
    CFE_ES_PERFDATA_Rpt = Handlebars.compile(CFE_ES_PERFDATA_Template);



    function drawPerfChart (objResp) {   
        var fullWidth = $('#' + objResp.TableID).width(); 
        var data = createData(objResp)
          , lanes = data.lanes
          , items = data.items
          , laneLength = data.lanes.length;
        
        var timeBegin = GetSmallestTimerValue(items);
        var timeEnd = GetLargestTimerValue(items); 
        
        console.log(timeBegin)
        console.log(timeEnd);
        console.log(items);
         
         
        var m = [20, 15, 20, 175]; //top right bottom left
        var w = 1250 - m[1] - m[3];
        var miniHeight = laneLength * 12 + 50;
        var mainHeight = laneLength * 25 + 50;
        var h = mainHeight + miniHeight;
        $('#' + objResp.TableID).height(h);
        h = h + m[0] + m[2];
        
        //scales
        var x = d3.scale.linear()
                .domain([timeBegin, timeEnd])
                .range([0, w]);
        var x1 = d3.scale.linear()
                .range([0, w]);
        var y1 = d3.scale.linear()
                .domain([0, laneLength])
                .range([0, mainHeight]);
        var y2 = d3.scale.linear()
                .domain([0, laneLength])
                .range([0, miniHeight]);

        var chartHeight = h - 55;
        var chart = d3.select('#' + objResp.TableID)
                    .append("svg")
                    .attr("viewBox", "0 0 1250 " + h) // 0 0 1250 500
                    .attr("style", "height: " + chartHeight + "px; width: auto;")
                    .attr("class", "chart");
        
        chart.append("defs").append("clipPath")
            .attr("id", "clip")
            .append("rect")
            .attr("width", w)
            .attr("height", mainHeight);

        var main = chart.append("g")
                    .attr("transform", "translate(" + m[3] + "," + m[0] + ")")
                    .attr("width", w)
                    .attr("height", mainHeight)
                    .attr("class", "main");

        var mini = chart.append("g")
                    .attr("transform", "translate(" + m[3] + "," + (mainHeight + m[0]) + ")")
                    .attr("width", w)
                    .attr("height", miniHeight)
                    .attr("class", "mini");
    
        //main lanes and texts
        main.append("g").selectAll(".laneLines")
            .data(items)
            .enter().append("line")
            .attr("x1", 0)
            .attr("y1", function(d) {return y1(d.lane);})
            .attr("x2", w)
            .attr("y2", function(d) {return y1(d.lane);})
            .attr("stroke", "lightgray")

        main.append("g").selectAll(".laneText")
            .data(lanes)
            .enter().append("text")
            .text(function(d) {return d;})
            .attr("x", -m[1])
            .attr("y", function(d, i) {return y1(i + .5);})
            .attr("dy", ".5ex")
            .attr("text-anchor", "end")
            .attr("class", "laneText");
        
        //mini lanes and texts
        mini.append("g").selectAll(".laneLines")
            .data(items)
            .enter().append("line")
            .attr("x1", 0)
            .attr("y1", function(d) {return y2(d.lane);})
            .attr("x2", w)
            .attr("y2", function(d) {return y2(d.lane);})
            .attr("stroke", "lightgray");

        mini.append("g").selectAll(".laneText")
            .data(lanes)
            .enter().append("text")
            .text(function(d) {return d;})
            .attr("x", -m[1])
            .attr("y", function(d, i) {return y2(i + .5);})
            .attr("dy", ".5ex")
            .attr("text-anchor", "end")
            .attr("class", "laneText");

        var itemRects = main.append("g")
                            .attr("clip-path", "url(#clip)");
        
        //mini item rects
        mini.append("g").selectAll("miniItems")
            .data(items)
            .enter().append("rect")
            .attr("class", function(d) {
                if(d.spurious == true)
                {
                    return "miniItemError";
                }
                else
                {
                    return "miniItem";
                }})
            .attr("x", function(d) {return x(d.start);})
            .attr("y", function(d) {return y2(d.lane + .5) - 5;})
            .attr("width", function(d) {return x(d.end - d.start);})
            .attr("height", 10);

        //mini labels
        //mini.append("g").selectAll(".miniLabels")
        //    .data(items)
        //    .enter().append("text")
        //    .text(function(d) {return "";})
        //    .attr("x", function(d) {return x(d.start);})
        //    .attr("y", function(d) {return y2(d.lane + .5);})
        //    .attr("dy", ".5ex");

        //brush
        var brush = d3.svg.brush()
                            .x(x)
                            .on("brush", display);
                            
        var tip = d3.tip()
            .attr('class', 'd3-tip')
            .offset([-10, 0])
            .html(function(d) {
                var duration = d.end - d.start;
                var sDuration = duration.toPrecision(6);
                return "<strong>Start:</strong> <span style='color:red'>" + d.start + "</span><br><strong>Stop:</strong> <span style='color:red'>" + d.end + "</span><br><strong>Duration:</strong><span style='color:red'>" + duration + "</span>";
        })
        
        chart.call(tip);
        
        // draw the x axis
        var xMainAxis = d3.svg.axis()
            .scale(x1)
            .orient('top')
            .tickSize(6, 0, 0);

        main.append("g")
            .attr("class", "axis")
            .attr('transform', 'translate(0, -0.5)')
            .call(xMainAxis);
        
        var xMiniAxis = d3.svg.axis()
            .scale(x)
            .orient('bottom')
            .tickSize(6, 0, 0);
        
        mini.append("g")
            .attr("class", "x brush")
            .call(brush)
            .selectAll("rect")
            .attr("y", 1)
            .attr("height", miniHeight - 1);

        mini.append("g")
            .attr("class", "axis")
            .attr('transform', 'translate(0,' + miniHeight + ')')
            .call(xMiniAxis);
            
        display();
        
        function display() {
            var rects, 
                minExtent = brush.extent()[0],
                maxExtent = brush.extent()[1],
                visItems = items.filter(function(d) {return d.start < maxExtent && d.end > minExtent;});
        
            mini.select(".brush")
                .call(brush.extent([minExtent, maxExtent]));
        
            x1.domain([minExtent, maxExtent]);
            
            main.select('.axis').call(xMainAxis);
        
            //update main item rects                
            rects = itemRects.selectAll("rect")
                    .data(visItems, function(d) { return d.id; })
                .attr("x", function(d) {return x1(d.start);})
                .attr("width", function(d) {return x1(d.end) - x1(d.start);});
            
            rects.enter().append("rect")
                .attr("class", function(d) {
                    if(d.spurious == true)
                    {
                        return "miniItemError";
                    }
                    else
                    {
                        return "miniItem";
                    }})
                .attr("x", function(d) {return x1(d.start);})
                .attr("y", function(d) {return y1(d.lane) + 2;})
                .attr("width", function(d) {return x1(d.end) - x1(d.start);})
                .attr("height", function(d) {return .8 * y1(1);})
                .attr("vector-effect", "non-scaling-stroke")
                .attr("stroke", "black")
                .attr("stroke-width", "1") 
                .on('mouseover', tip.show)
                .on('mouseout', tip.hide);
        
            rects.exit().remove();
        
            //update the item labels
            //labels = itemRects.selectAll("text")
            //    .data(visItems, function (d) { return d.id; })
            //    .attr("x", function(d) {return x1(Math.max(d.start, minExtent) + 2);});
            //
            //labels.enter().append("text")
            //    .text(function(d) {return d.id;})
            //    .attr("x", function(d) {return x1(Math.max(d.start, minExtent));})
            //    .attr("y", function(d) {return y1(d.lane + .5);})
            //    .attr("text-anchor", "start");
        
            //labels.exit().remove();
        }       
    }
    
    
    function GetLargestTimerValue(A)
    {
        var value = 0;
        for(var i=0; i < A.length; i++)
        {
            if(A[i].start > value)
            {
                value = A[i].start;
            }
            if(A[i].end > value)
            {
                value = A[i].end;
            }
        }
        
        return value;
    }
    
    
    function GetSmallestTimerValue(A)
    {
        var value = 0;
        for(var i=0; i < A.length; i++)
        {
            if(i==0)
            {
                value = A[i].start;
            }
            
            if(A[i].start < value)
            {
                value = A[i].start;
            }
            
            if(A[i].end < value)
            {
                value = A[i].end;
            }
        }
        
        return value;
    }
    
    
    function GetSmallestUpper32(A)
    {
        var value = 0;
        for(var i=0; i < A.length; i++)
        {
            if(i==0)
            {
                value = A[i].start.Upper32;
            }
            
            if(A[i].start.Upper32 < value)
            {
                value = A[i].start.Upper32;
            }
            
            if(A[i].stop.Upper32 < value)
            {
                value = A[i].stop.Upper32;
            }
        }
        
        return value;
    }
    
    
    function IsTimerEqualTo(A, B)
    {
        if(A.Upper32 == B.Upper32)
        {
            if(A.Lower32 == B.Lower32)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        else
        {
            return false;
        }
    }

    
    function IsTimerNotEqualTo(A, B)
    {
        if(A.Upper32 != B.Upper32)
        {
            if(A.Lower32 != B.Lower32)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        else
        {
            return false;
        }
    }
    
    function IsTimerLessThan(A, B)
    {
        if(A.Upper32 < B.Upper32)
        {
            return true;
        }
        else if(A.Upper32 == B.Upper32)
        {
            if(A.Lower32 < B.Lower32)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        else
        {
            return false;
        }
    }   
    
    
    function IsTimerGreaterThan(A, B)
    {
        if(A.Upper32 > B.Upper32)
        {
            return true;
        }
        else if(A.Upper32 == B.Upper32)
        {
            if(A.Lower32 > B.Lower32)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        else
        {
            return false;
        }
    }   
    
    
    var GetPerfIDName = function(perfID) {
        var newName = 'Unknown-' + perfID;
        
        switch(perfID)
        {
            case 1: 
                newName = "CFE_ES_MAIN";
                break;
                
            case 2: 
                newName = "CFE_EVS_MAIN";
                break;
                
            case 3: 
                newName = "CFE_TBL_MAIN";
                break;
                
            case 4: 
                newName = "CFE_SB_MAIN";
                break;
                
            case 5: 
                newName = "CFE_SB_MSG_LIM";
                break;
                
            case 27: 
                newName = "CFE_SB_PIPE_OFLOW";
                break;
                
            case 6: 
                newName = "CFE_TIME_MAIN";
                break;
                
            case 7: 
                newName = "CFE_TIME_TONE1HZISR";
                break;
                
            case 8: 
                newName = "CFE_TIME_LOCAL1HZISR";
                break;
                
            case 9: 
                newName = "CFE_TIME_SENDMET";
                break;
                
            case 10: 
                newName = "CFE_TIME_LOCAL1HZTASK";
                break;
                
            case 11: 
                newName = "CFE_TIME_TONE1HZTASK";
                break;
                
            case 32: 
                newName = "CF_APPMAIN";
                break;
                
            case 33: 
                newName = "CF_FILESIZE";
                break;
                
            case 34: 
                newName = "CF_FOPEN";
                break;
                
            case 35: 
                newName = "CF_FCLOSE";
                break;
                
            case 36: 
                newName = "CF_FREAD";
                break;
                
            case 37: 
                newName = "CF_FWRITE";
                break;
                
            case 38: 
                newName = "CF_REDLIGHT";
                break;
                
            case 39: 
                newName = "CF_CYCLE_ENG";
                break;
                
            case 40: 
                newName = "CF_QDIRFILES";
                break;
                
            case 41: 
                newName = "CIO_MAIN_TASK";
                break;
                
            case 42: 
                newName = "CIO_SOCKET_SEND";
                break;
                
            case 43: 
                newName = "CIO_SOCKET_RCV";
                break;
                
            case 44: 
                newName = "CS_APPMAIN";
                break;
                
            case 45: 
                newName = "DS_APPMAIN";
                break;
                
            case 46: 
                newName = "EIM_APPMAIN";
                break;
                
            case 47: 
                newName = "FM_APPMAIN";
                break;
                
            case 48: 
                newName = "FM_CHILD_TASK";
                break;
                
            case 49: 
                newName = "HK_APPMAIN";
                break;
                
            case 50: 
                newName = "HS_IDLETASK";
                break;
                
            case 51: 
                newName = "HS_APPMAIN";
                break;
                
            case 52: 
                newName = "LC_APPMAIN";
                break;
                
            case 53: 
                newName = "LC_WDT_SEARCH";
                break;
                
            case 54: 
                newName = "MD_APPMAIN";
                break;
                
            case 55: 
                newName = "MM_APPMAIN";
                break;
                
            case 56: 
                newName = "MM_SEGBREAK";
                break;
                
            case 57: 
                newName = "MM_EEPROM_POKE";
                break;
                
            case 58: 
                newName = "MM_EEPROM_FILELOAD";
                break;
                
            case 59: 
                newName = "MM_EEPROM_FILL";
                break;
                
            case 60: 
                newName = "SC_APPMAIN";
                break;
                
            case 61: 
                newName = "SCH_APPMAIN";
                break;
        }
        
        return newName;
    }
    
    
    
    var createData = function(objResp) {
        TicksPerSecond = objResp.MetaData.TimerTicksPerSecond;
        
        var input = objResp.Data;
        var data = {lanes:[], items:[]};
        var laneLastData = [];
        var smallestValue = {Upper32:-1, Lower32:-1};
        var largestValue = {Upper32:-1, Lower32:-1};
        for(var iData = 0; iData < input.length; iData++) {
            /* Extract the perf IDs for the lanes array. */
            var laneExists = false;
            var iLaneIndex = 0;
            var perfID = input[iData].Data & 0x7fffffff;
            /* Protect against zero entries. */
            if(perfID == 0)
            {
                continue;
            }
            for(iLaneIndex = 0; iLaneIndex < data.lanes.length; iLaneIndex++) {
                if( perfID == data.lanes[iLaneIndex].id ) {
                    laneExists = true;
                    break;
                }
            }
            if(laneExists == false)
            {
                /* This is the first occurance of this ID.  Give it a name. */
                var newName = GetPerfIDName(perfID);
                data.lanes.push({id:perfID, label:newName, offset:data.lanes.length});
                
                /* Create an object in the laneLastData array so we can track the 
                 * starts and stops.
                 */
                laneLastData.push({id:perfID, start:{Upper32:-1, Lower32:-1}, stop:{Upper32:-1, Lower32:-1}, spurious:false});
                
                /* Update the iLaneIndex so the remaining code can just assume the 
                 * lane already existed so iLaneIndex can be used on the laneLastData
                 * array.
                 */
                iLaneIndex = data.lanes.length - 1;
            }
            
            /* First, lets see if we have new smallest or largest values. */
            var newValue = {Upper32:input[iData].TimerUpper32, Lower32:input[iData].TimerLower32};
            if(IsTimerEqualTo(smallestValue, {Upper32:-1, Lower32:-1}) || IsTimerLessThan(newValue, smallestValue))
            {
                smallestValue = newValue;
            }
            if(IsTimerEqualTo(largestValue, {Upper32:-1, Lower32:-1}) || IsTimerGreaterThan(newValue, largestValue))
            {
                largestValue = newValue;
            }
                
            /*  Determine if this is a start or a stop.  A stop has the 32nd bit set.
             */ 
            if(input[iData].Data < 0x80000000)
            {                
                /* This is a start entry.  Now check to see if the previous entry was
                 * also a start entry. 
                 */
                if(IsTimerNotEqualTo(laneLastData[iLaneIndex].start, {Upper32:-1, Lower32:-1}))
                {
                    /* The previous entry was a start entry.  Flag this as a spurious 
                     * event, close the event by giving it a stop time and immediately 
                     * create a new one.  This should appear as a single bar with a 
                     * break at the time the second start occured. 
                     */
                     
                    /* Set the spurious flag so we can change the block color to
                     * signify spurious interrupts. 
                     */
                    laneLastData[iLaneIndex].spurious = true;
                    
                    /* Push a data item with the previous start but the stop set to 
                     * new start value.  This will let us denote where the spurious 
                     * interrupt occurred.
                     */
                    var startTickCount = laneLastData[iLaneIndex].start;
                    data.items.push(
                        {start:{
                            Upper32:laneLastData[iLaneIndex].start.Upper32, 
                            Lower32:laneLastData[iLaneIndex].start.Lower32}, 
                         stop:{
                            Upper32:newValue.Upper32,
                            Lower32:newValue.Lower32},
                         lane:iLaneIndex, 
                         id:'',
                         spurious:true});

                    /* Now update laneLastData to reflect a new start time. */
                    laneLastData[iLaneIndex].start.Upper32 = newValue.Upper32;
                    laneLastData[iLaneIndex].start.Lower32 = newValue.Lower32;
                    laneLastData[iLaneIndex].stop = {Upper32:-1, Lower32:-1};
                }
                else
                {
                    /* This is a nominal start.  We can't push the data item until we get the 
                     * corresponding stop.  Just store the start time in the laneLastData and
                     * continue.
                     */
                    laneLastData[iLaneIndex].start.Upper32 = newValue.Upper32;
                    laneLastData[iLaneIndex].start.Lower32 = newValue.Lower32;
                    laneLastData[iLaneIndex].stop = {Upper32:-1, Lower32:-1};
                    laneLastData[iLaneIndex].spurious = false;
                } 
            }
            else
            {
                /* This is a stop entry.  Now check to see if the previous entry was
                 * also a stop entry. */
                if(IsTimerNotEqualTo(laneLastData[iLaneIndex].stop, {Upper32:-1, Lower32:-1}))
                {
                    /* The previous entry was a stop entry.  Flag this as a spurious 
                     * event, open a new event by giving it a start and stop time.  This s
                     * hould appear as a single bar with a break at the time the second 
                     * start occured. 
                     */  
                    /* Set the spurious flag so we can change the block color to
                     * signify spurious interrupts. 
                     */
                    laneLastData[iLaneIndex].spurious = true;
                    
                    /* Push a data item with the previous start but the stop set to 
                     * new start value.  This will let us denote where the spurious 
                     * interrupt occurred.
                     */
                    data.items.push(
                        {start:{
                            Upper32:laneLastData[iLaneIndex].stop.Upper32, 
                            Lower32:laneLastData[iLaneIndex].stop.Lower32}, 
                         stop:{
                            Upper32:newValue.Upper32,
                            Lower32:newValue.Lower32},
                         lane:iLaneIndex, 
                         id:'',
                         spurious:true});
                                             
                    /* Now update laneLastData to reflect a new stop time. */
                    laneLastData[iLaneIndex].stop.Upper32 = newValue.Upper32;
                    laneLastData[iLaneIndex].stop.Lower32 = newValue.Lower32;
                    laneLastData[iLaneIndex].start = {Upper32:-1, Lower32:-1};
                }
                else 
                {
                    /* This is a nominal stop.  Go ahead and close the item out by pushing it to the
                     * data array with spurious set to false.
                     */
                    data.items.push(
                        {start:{
                            Upper32:laneLastData[iLaneIndex].start.Upper32, 
                            Lower32:laneLastData[iLaneIndex].start.Lower32}, 
                         stop:{
                            Upper32:newValue.Upper32,
                            Lower32:newValue.Lower32},
                         lane:iLaneIndex, 
                         id:'',
                         spurious:false});
                    
                    laneLastData[iLaneIndex].stop.Upper32 = newValue.Upper32;
                    laneLastData[iLaneIndex].stop.Lower32 = newValue.Lower32;
                    laneLastData[iLaneIndex].start.Upper32 = -1;
                    laneLastData[iLaneIndex].start.Lower32 = -1;
                    laneLastData[iLaneIndex].spurious = false;
                } 
            }    
        }
        
        console.log(smallestValue);
        console.log(largestValue);
        
        /* Now look for items that are still open.  In other words, items at the very end with 
         * start times but no stop times.  Go ahead and set the stop times to the largest value.
         */
        for(var iLaneIndex = 0; iLaneIndex < laneLastData.length; iLaneIndex++) 
        {
            if(laneLastData[iLaneIndex].start != -1)
            {
                if(laneLastData[iLaneIndex].stop == -1)
                {
                    var startTickCount = {
                        Lower32:laneLastData[iLaneIndex].start.Lower32,
                        Upper32:laneLastData[iLaneIndex].start.Upper32
                        };
                    var stopTickCount = {
                        Lower32:laneLastData[iLaneIndex].stop.Lower32,
                        Upper32:laneLastData[iLaneIndex].stop.Upper32
                        };
                    data.items.push({start:startTickCount, stop:stopTickCount, lane:iLaneIndex, id:'', spurious:false});
                }
            }
        }
        
        /* Next we need to replace all -1 start times with the lowest value.  This 
         * will make it appear that the event was already in the started state at the start of 
         * the recording, which is correct.
         */
        for(var iData = 0; iData < data.items.length; iData++) 
        {
            if(IsTimerEqualTo(data.items[iData].start, {Upper32:-1, Lower32:-1}))
            {
                data.items[iData].start.Lower32 = smallestValue.Lower32;
                data.items[iData].start.Upper32 = smallestValue.Upper32;
            }
        }
        
        /* Next lets normalize the upper 32 bits to make this number a bit smaller and
         * more managable.
         */
        for(var i = 0; i < data.items.length; i++) 
        {
            data.items[i].start.Upper32 = data.items[i].start.Upper32 - smallestValue.Upper32;
            data.items[i].stop.Upper32 = data.items[i].stop.Upper32 - smallestValue.Upper32;
        }
        
        /* The next step is to convert these counts to actual time.  We're just going to create
         * a new array of structures.
         */
        var timeData = {lanes:[], items:[]};
        for(var i = 0; i < data.lanes.length; i++)
        {
            timeData.lanes.push(data.lanes[i].label);
        }
        
        //data.items.length
        for(var i = 0; i < data.items.length; i++) 
        {
            var newStartTime = ((data.items[i].start.Upper32 * 4294967296) / TicksPerSecond);
            newStartTime += (data.items[i].start.Lower32 / TicksPerSecond);
            
            var newStopTime = ((data.items[i].stop.Upper32 * 4294967296) / TicksPerSecond);
            newStopTime += (data.items[i].stop.Lower32 / TicksPerSecond);
            
            timeData.items.push({start:newStartTime, end:newStopTime, id:"i" + i, lane:data.items[i].lane, spurious:data.items[i].spurious});
            
        }
        
        /* Finally, lets normalize this data so the start is at 0 seconds.
         */
        var smallestTime = GetSmallestTimerValue(timeData.items);
        
        for(var i = 0; i < timeData.items.length; i++) 
        {
            timeData.items[i].start = timeData.items[i].start - smallestTime;
            timeData.items[i].end = timeData.items[i].end - smallestTime;
        }
        
        //console.log(smallestTime);
                     
        return timeData;
    }
    
    
    