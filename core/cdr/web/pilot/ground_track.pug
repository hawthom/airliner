.cdr-display-container
  #cdr-track.cdr-display-container-item
        
script. 
    "use strict";
    
    (()=>{   
        /**
         * Cesium Access token
         * @type {String}
         */
        Cesium.Ion.defaultAccessToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiJhNmYwNWMxMy0xYWFmLTQyZmQtOWE3YS1iODEwYmYyZWU0MWEiLCJpZCI6MTE1ODAsInNjb3BlcyI6WyJhc3IiLCJnYyJdLCJpYXQiOjE1NTkyNjY1MDh9.0jtx2j-_BkuhwB3ZoUo8Fd5NYzbcEnkfUCjjdDa5QG0';
    
        var DefaultHomeLocation = Cesium.Cartesian3.fromDegrees( -95.3698, 29.7604, 13000.0 ); /* Houston */
    
        var viewer = new Cesium.Viewer( 'cdr-track', {    
            animation: true,
            fullscreenButton: false,
            baseLayerPicker: false,
            vrButton: false,
            geocoder: false,
            DefaultHomeLocationButton: false,
            infoBox: false,
            sceneModePicker: false,
            selectionIndicator: false,
            timeline: false,
            navigationHelpButton: false,
            navigationInstructionsInitiallyVisible: false,
            scene3DOnly: false,
            shouldAnimate: true
        } );
        
        var lat = 0.0;
        var lon = 0.0;
        var alt = 13000.0;
        var cesiumGroundElevation = 0.0;
        var altPadding = 1000.0;
        var groundElevation = 0;
        var Q = [];
        Q[0] = 0.0;
        Q[1] = 0.0;
        Q[2] = 0.0;
        Q[3] = 0.0;
        var Pitch = 0.0;
        var Roll = 0.0;
        var Yaw = 0.0;

        session.subscribe([
                {name: '/PX4/PX4_VehicleGlobalPositionMsg_t/Lat'},
                {name: '/PX4/PX4_VehicleGlobalPositionMsg_t/Lon'},
                {name: '/PX4/PX4_VehicleGlobalPositionMsg_t/Alt'},
                {name: '/PX4/PX4_VehicleAttitudeMsg_t/Q[0]'},
                {name: '/PX4/PX4_VehicleAttitudeMsg_t/Q[1]'},
                {name: '/PX4/PX4_VehicleAttitudeMsg_t/Q[2]'},
                {name: '/PX4/PX4_VehicleAttitudeMsg_t/Q[3]'}
            ], function(objs) {
            var groundElevation = 10;
            
            for(var i = 0; i < objs.length; ++i) {
                switch(objs[i].opsPath) {
                    case '/PX4/PX4_VehicleGlobalPositionMsg_t/Lat':
                        lat = objs[i].sample[0].value;
                        break;
                       
                    case '/PX4/PX4_VehicleGlobalPositionMsg_t/Lon':
                        lon = objs[i].sample[0].value;
                        break;
                       
                    case '/PX4/PX4_VehicleGlobalPositionMsg_t/Alt':
                        alt = objs[i].sample[0].value;
                        break;
                       
                    case '/PX4/PX4_VehicleAttitudeMsg_t/Q[0]':
                        Q[0] = objs[i].sample[0].value;
                        break;
                       
                    case '/PX4/PX4_VehicleAttitudeMsg_t/Q[1]':
                        Q[1] = objs[i].sample[0].value;
                        break;
                       
                    case '/PX4/PX4_VehicleAttitudeMsg_t/Q[2]':
                        Q[2] = objs[i].sample[0].value;
                        break;
                       
                    case '/PX4/PX4_VehicleAttitudeMsg_t/Q[3]':
                        Q[3] = objs[i].sample[0].value;
                        break;
                       
                    default:
                        break;
                }
            }
        });
        
        var uas = viewer.entities.add({
            billboard : {
                image : "data:image/svg+xml,<svg viewBox='0 0 100 100' height='25' width='25' xmlns='http://www.w3.org/2000/svg'><path fill='rgb(91, 183, 91)' stroke='rgb(0, 0, 0)' stroke-width='5' d='M10,90 L50,10 L90,90Z'/><path stroke='rgb(0, 0, 0)' stroke-width='5' d='M50,90 L50,10'/></svg>",
                alignedAxis : Cesium.Cartesian3.UNIT_Z
            }
        });
        
        var isCameraInitialized = false;
        
        setInterval(function () {
            var phi = Math.atan2( 2 * ( ( Q[ 2 ] * Q[ 3 ] ) + ( Q[ 0 ] * Q[ 1 ] ) ), 1.0 - 2.0 * ( Q[ 1 ] * Q[ 1 ] ) - ( Q[ 2 ] * Q[ 2 ] ) );
            var t = 2.0 * ( Q[ 0 ] * Q[ 2 ] - Q[ 1 ] * Q[ 3 ] );
            if ( t > 1 ) {
                t = 1;
            } else if ( t < -1 ) {
                t = -1;
            }
            var theta = Math.asin( t );
            var psi = Math.atan2( 2.0 * ( ( Q[ 1 ] * Q[ 2 ] ) + ( Q[ 0 ] * Q[ 3 ] ) ), 1.0 - 2.0 * ( ( Q[ 2 ] * Q[ 2 ] ) + ( Q[ 3 ] * Q[ 3 ] ) ) );

            Pitch = theta;
            Roll = ( -1 ) * phi;
            Yaw = psi;
        
            var positions = [ Cesium.Cartographic.fromDegrees( lon, lat ) ];
            var promise = Cesium.sampleTerrainMostDetailed( viewer.scene.terrainProvider, positions );
            Cesium.when( promise, function( updatedPositions ) {
                cesiumGroundElevation = positions[ 0 ].height;
            } );
                  
            var cameraAlt = Math.abs( alt - groundElevation ) + cesiumGroundElevation + altPadding;
            var uasAlt = Math.abs( alt - groundElevation ) + cesiumGroundElevation;
  
            var cameraPosition = Cesium.Cartesian3.fromDegrees( lon, lat, cameraAlt );
            var uasLocation = Cesium.Cartesian3.fromDegrees( lon, lat, uasAlt );
            
            uas.position = uasLocation;
            uas.billboard.rotation = -Yaw;

            var camera = viewer.scene.camera;
            
            if(isCameraInitialized == false) {
                viewer.camera.setView( {
                    destination: cameraPosition
                } );
                
                isCameraInitialized = true;
            };
            
        }, 1000);
        
        //viewer.camera.setView( {
        //    destination: DefaultHomeLocation,
        //} );
    })();
    