style.
  svg line { 
      shape-rendering: geometricPrecision;
  }


.cdr-display-container
  img#cdr-video.cdr-display-container-item.cdr-video(style='position:absolute; z-index: 5')
  #cdr-hud.cdr-display-container-item.cdr-hud(style='position:absolute; z-index: 10') 
    
        
script.
    if (SVG.supported == false) {
        alert('SVG not supported with ths browser.');
    }
  
    session.enableVideoStream(function(imgObj) {
        $('#cdr-video').attr('src', 'data:image/jpeg;base64,' + imgObj.buffer);
    });
    
    
    /**
     * Initial position
     * @type {Object}
     */
    var Position = {
      Lat: 0,
      Lon: 0,
      Alt: 0
    };
    
    /**
     * Initial Altitude
     * @type {Object}
     */
    var Attitude = {
      Yaw: 0,
      Pitch: 0,
      Roll: 0
    };
    
    var HUDCount = 0;
    var HUDStarted = false;
    
    /**
     * Will hold draw object, responsible for drawing shapes on the screen
     * @type {Object}
     */
    var draw;
    
    /**
     * HUD opacity
     * @type {Number}
     */
    var bgOpacity = 0.5;
    var curHeading = 0;
    var curPitch = 0;
    var curRoll = 0;
    var curAltitude = 0.0;
    var textHeading;
    var hdTicks;
    var hdTicksMask;
    var hdWidth;
    
    /**
     * HUD height
     * @type {Number}
     */
    var hudHeight;
    
    /**
     * HUD Width
     * @type {Number}
     */
    var hudWidth;
    
    var pxPer15Degrees;
    var pxPerDegree;
    var adiState;
    
    /**
     * Degrees per pitch line
     * @type {Number}
     */
    var degPerPitchLine = 15;
    var posPitchLineOnScreen = 5;
    var pxPerPitchLine;
    var pxPerDegreePitch;
    var pitchIndicator;
    var altPosMetersOnScreen = 5;
    var altPxPerMeter;
    var altitudeIndicator;
    var textAltitude;
    var altTicks;
    var OffsetY = 0;
    var rotation = 0;
    var hrzWidth;
    var cameraImage;
    var imageBuffer;
    var hdgDegPerMajorTick = 15;
    
    /**
     * Quaternions
     * @type {Array}
     */
    var Q = [];
    var AltOffset = 0;
    var prevTS = 0;
    var currTS = 0;
    var ctr = 0;
    var fps = 0;
    var currentAltimeterCenter = 0.0;
    var altitudeOffsetSwitch = false;
    var altimeter;
    var altTicksArea;
    
    /**
     * Pitch initial direction
     * @type {Number}
     */
    var pitchDirection = 0.2;
    var altitudeDirection = 0.01;
    var toggle = 0;
    
    /**
     * HUD text color
     * @type {String}
     */
    var text_color = '#0f0';
    
    /**
     * Update HUD heading
     * @param  {Number} newHeading
     * @return {undefined}
     */
    function updateHUDHeading( newHeading ) {
        if(Number.isNaN(newHeading) == false) {
            if ( newHeading < 0 ) {
                newHeading = newHeading + 360;
            }
    
            hdTicks.stop(true, true);
            textHeading.text( newHeading.toFixed( 0 ).toString() );
            hdTicks.animate(HUD_UPDATE_RATE, '-').x( -newHeading * pxPerDegree );
        }
    }
    
    /**
     * Update HUD pitch
     * @param  {Number} newPitch
     * @return {undefined}
     */
    function updateHUDPitch( newPitch ) {
        if(Number.isNaN(newPitch) == false) {
            OffsetY = newPitch * pxPerDegreePitch;
        }
    }
    
    /**
     * Update HUD roll
     * @param  {Number} newRoll
     * @return {undefined}
     */
    function updateHUDRoll( newRoll ) {
        if(Number.isNaN(newRoll) == false) {
            var myMatrix=new SVG.Matrix(1,0,0,1,0,0)
            
            rotation = newRoll;

            var myMatrixTranslated = myMatrix.rotate(rotation, hudWidth / 2, hudHeight / 2).translate(0, OffsetY);
            
            pitchIndicator.finish();
            pitchIndicator.animate(HUD_UPDATE_RATE, '-').transform(myMatrixTranslated);
            
      	}
    }
    
    /**
     * Draws HUD on given element
     * @param  {String} dom indentifier
     * @return {undefined}
     */
    function drawHUD( id ) {
      var aspectRatio = 320.0 / 180.0;
    
      hudWidth = $( '#' + id ).width();
      hudHeight = $( '#' + id ).height();
      
      /* define size for tthe svg */
      draw = SVG( id ).size( '100%', hudHeight );
    
      if ( SVG.supported == false ) {
    
        cu.logError( 'drawHUD | SVG not supported with ths browser.' );
    
      } else {
    
        draw.attr( 'preserveAspectRatio', 'xMinYMin meet' );
    
        /* -------------------------
         Draw altimeter
         ------------------------- */
        var altWidth = 50;
        var altHeight = hudHeight - 10;
    
        altPxPerMeter = altHeight / altPosMetersOnScreen;
    
        var altPxPerDecimeter = altPxPerMeter / 10.0;
        var altPxPerCentimeter = altPxPerMeter / 100.0;
        var altPxPerMillimeter = altPxPerMeter / 1000.0;
    
        altimeter = draw.group();
        // /* Draw ticks group. */
        altTicksArea = altimeter.group();
        altTicks = altTicksArea.group();
        var altCenter = altimeter.group();
        var altCenterHeight = 30;
        var altTicksMask = altimeter.mask();
    
    
        /* -------------------------
         Draw Heading
         ------------------------- */
        var hdHeight = 50;
        hdWidth = hudWidth - 40;
        pxPer15Degrees = ( hdWidth / 2 ) / 5;
        pxPerDegree = pxPer15Degrees / 15.0;
        var heading = draw.group();
        var headingBorder = heading.group();
        /* Draw border. */
        var hdRec1 = headingBorder.rect( hdWidth, hdHeight ).attr( {
          x: ( hudWidth - hdWidth ) / 2,
          y: hudHeight - hdHeight - 7,
          rx: 5,
          ry: 5,
          'fill-opacity': bgOpacity
        } );
    
        /* Draw ticks */
        hdTicksArea = heading.group();
        hdTicks = hdTicksArea.group();
        for ( i = 0; i < ( 360 + 90 ); i++ ) {
          if ( i % hdgDegPerMajorTick == 0 ) {
    
            x = ( ( hudWidth ) / 2 ) + ( pxPerDegree * i );
    
            hdTicks.line( x, hudHeight - hdHeight - 3, x, hudHeight - hdHeight + 10 ).attr( {
              width: 1,
              stroke: text_color
            } );
    
            var fixedHeading = i;
    
            if ( i < 0 ) {
    
              fixedHeading = 360 + i;
    
            } else if ( i >= 360 ) {
    
              fixedHeading = i - 360;
    
            }
    
            var textHeadingTick = hdTicks.text( fixedHeading.toString() ).move( x, hudHeight - hdHeight + 13 );
            textHeadingTick.font( {
              fill: text_color,
              anchor: 'middle',
              size: 13
            } );
          }
        }
        for ( i = 0; i > ( -360 - 90 ); i-- ) {
          if ( i % hdgDegPerMajorTick == 0 ) {
    
            x = ( ( hudWidth ) / 2 ) + ( pxPerDegree * i );
    
            hdTicks.line( x, hudHeight - hdHeight - 3, x, hudHeight - hdHeight + 10 ).attr( {
              width: 1,
              stroke: text_color
            } );
    
            var fixedHeading = i;
    
            if ( i < 0 ) {
    
              fixedHeading = 360 + i;
    
            } else if ( i >= 360 ) {
    
              fixedHeading = i - 360;
    
            }
    
            var textHeadingTick = hdTicks.text( fixedHeading.toString() ).move( x, hudHeight - hdHeight + 13 );
            textHeadingTick.font( {
              fill: text_color,
              anchor: 'middle',
              size: 13
            } );
    
          }
        }
    
        /* Draw center heading indicator. */
        var hdCenter = heading.group();
    
        var headingIndicatorPolyLine = [
            [ ( ( hudWidth + 20 ) / 2 ) + 10, hudHeight - hdHeight + 43 ],
            [ ( ( hudWidth + 20 ) / 2 ) + 10, hudHeight - hdHeight + 10 ],
            [ ( hudWidth + 20 ) / 2, hudHeight - hdHeight + 10 ],
            [ hudWidth / 2, hudHeight - hdHeight - 8 ],
            [ ( hudWidth - 20 ) / 2, hudHeight - hdHeight + 10 ],
            [ ( ( hudWidth - 20 ) / 2 ) - 10, hudHeight - hdHeight + 10 ],
            [ ( ( hudWidth - 20 ) / 2 ) - 10, hudHeight - hdHeight + 43 ]
        ];
        
        var headingIndicatorMask = hdCenter.polyline( headingIndicatorPolyLine ).fill('#000000');
        var headingMask = hdCenter.rect( hdWidth, hdHeight ).attr( {
            fill: '#ffffff',
            x: ( hudWidth - hdWidth ) / 2,
            y: hudHeight - hdHeight - 7,
            rx: 5,
            ry: 5,
        });
        
        var hdTicksMask = draw.mask();
        hdTicksMask.add(headingMask);
        hdTicksMask.add(headingIndicatorMask);
        hdTicksArea.maskWith(hdTicksMask);
    
        hdCenter.polyline( headingIndicatorPolyLine ).fill('none').stroke({color: '#00ff00'});
        
        textHeading = draw.text( '0' ).move( ( hudWidth / 2 ), hudHeight - hdHeight + 13 );
        textHeading.font( {
            fill: text_color,
            anchor: 'middle',
            size: 16
        } );
    
        /* -------------------------
         Draw horizon
         ------------------------- */
        hrzWidth = ( hudWidth ) * 0.15;
        var hrzInterval;
        var horizonArea = draw.group();
    
        pxPerPitchLine = ( ( hudWidth / 2 ) / posPitchLineOnScreen );
        pxPerDegreePitch = pxPerPitchLine / degPerPitchLine;
        pitchIndicator = horizonArea.group();
    
        /* draw top half or pitch indicators */
        for ( i = 0; i <= 90; i++ ) {
          if ( i % degPerPitchLine == 0 ) {
            y = ( ( hudHeight ) / 2 ) - ( pxPerDegreePitch * i );
    
            if ( i > 0 ) {
              pitchIndicator.polyline( [
                [ ( hudWidth - hrzWidth ) / 2, y ],
                [ ( hudWidth - ( hrzWidth * 0.10 ) ) / 2, y ],
                [ hudWidth / 2, y + ( hrzWidth * 0.05 ) ],
                [ ( hudWidth + ( hrzWidth * 0.10 ) ) / 2, y ],
                [ ( hudWidth + hrzWidth ) / 2, y ]
              ] ).attr( {
                'stroke-width': 3,
                'fill-opacity': 0.0,
                stroke: '#000000'
              } );
              pitchIndicator.polyline( [
                [ ( hudWidth - hrzWidth ) / 2, y ],
                [ ( hudWidth - ( hrzWidth * 0.10 ) ) / 2, y ],
                [ hudWidth / 2, y + ( hrzWidth * 0.05 ) ],
                [ ( hudWidth + ( hrzWidth * 0.10 ) ) / 2, y ],
                [ ( hudWidth + hrzWidth ) / 2, y ]
              ] ).attr( {
                'stroke-width': 2,
                'fill-opacity': 0.0,
                stroke: '#00ff00'
              } );
    
              var fixedPitch = i;
              if ( i > 90 ) {
                fixedPitch = 180 - i;
              }
    
              pitchIndicator.rect( 20, 20 ).attr( {
                fill: '#000000',
                x: ( hudWidth - hrzWidth ) / 2 - 22,
                y: y - 10,
                'fill-opacity': bgOpacity,
              } );
              var leftTextPitchLine = pitchIndicator.text( fixedPitch.toString() ).move( ( hudWidth - hrzWidth ) / 2 - 5, y - 9 );
              leftTextPitchLine.font( {
                fill: '#00ff00',
                anchor: 'end',
                size: 15,
              } );
    
              pitchIndicator.rect( 20, 20 ).attr( {
                fill: '#000000',
                x: ( hudWidth + hrzWidth ) / 2 + 3,
                y: y - 10,
                'fill-opacity': bgOpacity,
              } );
              var rightTextPitchLine = pitchIndicator.text( fixedPitch.toString() ).move( ( hudWidth + hrzWidth ) / 2 + 5, y - 9 );
              rightTextPitchLine.font( {
                fill: '#00ff00',
                anchor: 'start',
                size: 15,
              } );
            } else {
              pitchIndicator.line( 50, y, 2 * hudWidth, y ).attr( {
                'stroke-width': 3,
                stroke: '#000000'
              } );
              pitchIndicator.line( 50, y, 2 * hudWidth, y ).attr( {
                'stroke-width': 2,
                stroke: '#00ff00'
              } );
            }
          }
        }
        /* draw bottom half or pitch indicators */
        for ( i = 0; i >= -90; i-- ) {
          if ( i % degPerPitchLine == 0 ) {
            y = ( ( hudHeight ) / 2 ) - ( pxPerDegreePitch * i );
    
            if ( i < 0 ) {
              pitchIndicator.polyline( [
                [ ( hudWidth - hrzWidth ) / 2, y ],
                [ ( hudWidth - ( hrzWidth * 0.10 ) ) / 2, y ],
                [ hudWidth / 2, y - ( hrzWidth * 0.05 ) ],
                [ ( hudWidth + ( hrzWidth * 0.10 ) ) / 2, y ],
                [ ( hudWidth + hrzWidth ) / 2, y ]
              ] ).attr( {
                'stroke-width': 3,
                'fill-opacity': 0.0,
                stroke: '#000000'
              } );
              pitchIndicator.polyline( [
                [ ( hudWidth - hrzWidth ) / 2, y ],
                [ ( hudWidth - ( hrzWidth * 0.10 ) ) / 2, y ],
                [ hudWidth / 2, y - ( hrzWidth * 0.05 ) ],
                [ ( hudWidth + ( hrzWidth * 0.10 ) ) / 2, y ],
                [ ( hudWidth + hrzWidth ) / 2, y ]
              ] ).attr( {
                'stroke-width': 2,
                'fill-opacity': 0.0,
                stroke: '#00ff00'
              } );
    
              var fixedPitch = i;
              if ( i < -90 ) {
                fixedPitch = -180 - i;
              }
    
              pitchIndicator.rect( 25, 20 ).attr( {
                fill: '#000000',
                x: ( hudWidth - hrzWidth ) / 2 - 27,
                y: y - 10,
                'fill-opacity': bgOpacity,
              } );
              var leftTextPitchLine = pitchIndicator.text( fixedPitch.toString() ).move( ( hudWidth - hrzWidth ) / 2 - 5, y - 9 );
              leftTextPitchLine.font( {
                fill: '#00ff00',
                anchor: 'end',
                size: 15,
              } );
    
              pitchIndicator.rect( 25, 20 ).attr( {
                fill: '#000000',
                x: ( hudWidth + hrzWidth ) / 2 + 3,
                y: y - 10,
                'fill-opacity': bgOpacity,
              } );
              var rightTextPitchLine = pitchIndicator.text( fixedPitch.toString() ).move( ( hudWidth + hrzWidth ) / 2 + 5, y - 9 );
              rightTextPitchLine.font( {
                fill: '#00ff00',
                anchor: 'start',
                size: 15,
              } );
            }
          }
        }
    
        /* mask to avoid occlusion with heading indicator */
        hrzMask = pitchIndicator.mask();
        hrzMask.rect( hudWidth, hudHeight ).attr( {
          fill: '#000000'
        } );
        hrzMask.rect( hudWidth - altWidth - 20, hudHeight - hdHeight - 20 ).attr( {
          fill: '#ffffff',
          x: 5,
          y: 5
        } );
        horizonArea.maskWith( hrzMask );
      }
    }
    
    
    drawHUD('cdr-hud');
    HUDStarted = true;
    
    var tlmAlt;
    var tlmQ = [];
    const maxSampleQueueSize = 10;
    var sampleAltQueue = [];
    var avgAltTimeDelta = 1000;
    var sampleQQueue = [];
    var avgQTimeDelta = 1000;
    const HUD_UPDATE_RATE = 100;
    
    session.subscribe([
        {name: '/PX4/PX4_VehicleGlobalPositionMsg_t/Alt'},
        {name: '/PX4/PX4_VehicleAttitudeMsg_t/Q[0]'},
        {name: '/PX4/PX4_VehicleAttitudeMsg_t/Q[1]'},
        {name: '/PX4/PX4_VehicleAttitudeMsg_t/Q[2]'},
        {name: '/PX4/PX4_VehicleAttitudeMsg_t/Q[3]'}
    ], function(objs) {
        for(var i = 0; i < objs.length; ++i) {
            switch(objs[i].opsPath) {
                case '/PX4/PX4_VehicleGlobalPositionMsg_t/Alt':
                    alt = objs[i].sample[0].value;
                
                    if(sampleAltQueue.length >= maxSampleQueueSize) {
                        sampleAltQueue.shift();
                    }
            
                    sampleAltQueue.push(Date.parse(objs[i].sample[0].gndTime));
            
                    var prevTime = 0;
                    var timeSum = 0;
                    for(var i = 0; i < sampleAltQueue.length; ++i) {
                        if(prevTime != 0) {
                            timeSum += sampleAltQueue[i] - prevTime;
                        }
                        prevTime = sampleAltQueue[i];
                    }
            
                    avgAltTimeDelta = timeSum / (sampleAltQueue.length - 1);
                    break;
                       
                case '/PX4/PX4_VehicleAttitudeMsg_t/Q[0]':
                    Q[0] = objs[i].sample[0].value;
                    break;
                       
                case '/PX4/PX4_VehicleAttitudeMsg_t/Q[1]':
                    Q[1] = objs[i].sample[0].value;
                    break;
                       
                case '/PX4/PX4_VehicleAttitudeMsg_t/Q[2]':
                    Q[2] = objs[i].sample[0].value;
                    break;
                       
                case '/PX4/PX4_VehicleAttitudeMsg_t/Q[3]':
                    Q[3] = objs[i].sample[0].value;
                
                    if(sampleQQueue.length >= maxSampleQueueSize) {
                        sampleQQueue.shift();
                    }
            
                    sampleQQueue.push(Date.parse(objs[i].sample[0].gndTime));
            
                    var prevTime = 0;
                    var timeSum = 0;
                    for(var i = 0; i < sampleQQueue.length; ++i) {
                        if(prevTime != 0) {
                            timeSum += sampleQQueue[i] - prevTime;
                        }
                        prevTime = sampleQQueue[i];
                    }
            
                    avgQTimeDelta = timeSum / (sampleQQueue.length - 1);
                    break;
                       
                default:
                    break;
            }
        }
    });
    
    setInterval(function () {
        var phi = Math.atan2( 2 * ( ( Q[ 2 ] * Q[ 3 ] ) + ( Q[ 0 ] * Q[ 1 ] ) ), 1.0 - 2.0 * ( Q[ 1 ] * Q[ 1 ] ) - ( Q[ 2 ] * Q[ 2 ] ) );
        var t = 2.0 * ( Q[ 0 ] * Q[ 2 ] - Q[ 1 ] * Q[ 3 ] );
        if ( t > 1 ) {
            t = 1;
        } else if ( t < -1 ) {
            t = -1;
        }
        var theta = Math.asin( t );
        var psi = Math.atan2( 2.0 * ( ( Q[ 1 ] * Q[ 2 ] ) + ( Q[ 0 ] * Q[ 3 ] ) ), 1.0 - 2.0 * ( ( Q[ 2 ] * Q[ 2 ] ) + ( Q[ 3 ] * Q[ 3 ] ) ) );

        var Pitch = theta;
        var Roll = ( -1 ) * phi;
        var Yaw = psi;
        
        updateHUDPitch( Pitch * 57.2958 );
        updateHUDHeading( Yaw * 57.2958 );
        updateHUDRoll( Roll * 57.2958 );
            
    }, HUD_UPDATE_RATE);
    
    
